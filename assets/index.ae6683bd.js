var m=Object.defineProperty;var c=(a,e,r)=>e in a?m(a,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):a[e]=r;var n=(a,e,r)=>(c(a,typeof e!="symbol"?e+"":e,r),r);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))o(t);new MutationObserver(t=>{for(const s of t)if(s.type==="childList")for(const i of s.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&o(i)}).observe(document,{childList:!0,subtree:!0});function r(t){const s={};return t.integrity&&(s.integrity=t.integrity),t.referrerpolicy&&(s.referrerPolicy=t.referrerpolicy),t.crossorigin==="use-credentials"?s.credentials="include":t.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function o(t){if(t.ep)return;t.ep=!0;const s=r(t);fetch(t.href,s)}})();class f{constructor(e){n(this,"id");n(this,"hasWumpus");n(this,"hasHole");n(this,"hasBat");this.id=e,this.hasWumpus=!1,this.hasHole=!1,this.hasBat=!1}}class u{constructor(e,r,o=null){n(this,"arrowCount");n(this,"moveCount");n(this,"board",[]);n(this,"playerX",0);n(this,"playerY",0);n(this,"renderer");this.arrowCount=5,this.moveCount=0,this.generateGameboard(e,r),this.randomizePlayerPosition(),this.renderer=o,this.renderer!=null&&this.renderer.renderAll(this.board,this.playerX,this.playerY,this.arrowCount,this.moveCount)}randomizePlayerPosition(){for(;;){this.playerX=Math.round(Math.random()*(this.board.length-1)),this.playerY=Math.round(Math.random()*(this.board[0].length-1));const e=this.board[this.playerX][this.playerY];if(!e.hasWumpus&&!e.hasHole&&!e.hasBat)return}}movePlayer(e){let r=this.playerX,o=this.playerY;const t=/^north|n$/i,s=/^east|e$/i,i=/^south|s$/i,l=/^west|w$/i;if(t.test(e))o--,this.moveCount++;else if(s.test(e))r++,this.moveCount++;else if(i.test(e))o++,this.moveCount++;else if(l.test(e))r--,this.moveCount++;else{console.log("Choose either North, East, South or West.");return}r===this.board.length&&(r=0),r===-1&&(r=this.board.length-1),o===this.board[0].length&&(o=0),o===-1&&(o=this.board[0].length-1),this.playerX=r,this.playerY=o,this.triggerEvents(),this.renderer!=null&&this.renderer.renderAll(this.board,this.playerX,this.playerY,this.arrowCount,this.moveCount)}triggerEvents(){const e=this.board[this.playerX][this.playerY];e.hasWumpus&&console.log("Game over"),e.hasHole&&console.log("Game over"),e.hasBat&&(this.randomizePlayerPosition(),console.log("landat p\xE5 bat"))}adjacentRooms(){let e=this.playerY-1,r=this.playerX+1,o=this.playerY+1,t=this.playerX-1;r===this.board.length&&(r=0),t===-1&&(t=this.board.length-1),o===this.board[0].length&&(o=0),e===-1&&(e=this.board[0].length-1);const s=this.board[this.playerX][e],i=this.board[r][this.playerY],l=this.board[this.playerX][o],d=this.board[t][this.playerY];return[s,i,l,d]}wumpusPosition(){for(let e=0;e<this.board[0].length;e++)for(let r=0;r<this.board.length;r++)this.board[r][e].hasWumpus}moveWumpus(){for(let e=0;e<this.board[0].length;e++)for(let r=0;r<this.board.length;r++)if(this.board[r][e].hasWumpus){let o=r+1,t=e;o===this.board.length?o=0:t===this.board[0].length&&(t=0),console.log(r),console.log(e),this.board[r][e].hasWumpus=!1,this.board[o][t].hasWumpus=!0;return}}generateGameboard(e,r){if(e*r<20)throw new Error("The gameboard is too small! Choose a bigger one.");const o=[];for(let t=0;t<e;t++){const s=[];for(let i=0;i<r;i++){const l=new f(i*e+t+1);Math.random()<.2?l.hasHole=!0:Math.random()<.3&&(l.hasBat=!0),s.push(l)}o.push(s)}if(u.emptyRooms(o)<2){console.log("bad room, trying again!"),this.generateGameboard(e,r);return}u.randomizeWumpusPosition(o),this.board=o}static randomizeWumpusPosition(e){for(;;){const r=Math.round(Math.random()*(e.length-1)),o=Math.round(Math.random()*(e[0].length-1)),t=e[r][o];if(!t.hasHole&&!t.hasBat){t.hasWumpus=!0;break}}}static emptyRooms(e){let r=0;for(let o=0;o<e[0].length;o++)for(let t=0;t<e.length;t++){const s=e[t][o];!s.hasHole&&!s.hasBat&&r++}return r}}class p{constructor(e,r,o){n(this,"boardContainer");n(this,"arrowContainer");n(this,"moveContainer");this.boardContainer=document.querySelector(e),this.arrowContainer=document.querySelector(r),this.moveContainer=document.querySelector(o)}renderBoard(e,r,o){let t="";for(let s=0;s<e[0].length;s++){t+="<tr>";for(let i=0;i<e.length;i++)r===i&&o===s?t+=`<td class="board-square"> ${e[i][s].id} <img src="/player.jpg" width="50"></td>`:e[i][s].hasWumpus?t+=`<td class="board-square"> ${e[i][s].id} <img src="/wumpus.png" width="50"></td>`:e[i][s].hasHole?t+=`<td class="board-square"> ${e[i][s].id} <img src="/hole.jpg" width="50"></td>`:e[i][s].hasBat?t+=`<td class="board-square"> ${e[i][s].id} <img src="/bats.jpg" width="50"></td>`:t+=`<td class="board-square"> ${e[i][s].id} </td>`;t+="</tr>"}this.boardContainer.innerHTML=t}renderArrows(e){this.arrowContainer.innerHTML=e.toString()}renderMoves(e){this.moveContainer.innerHTML=e.toString()}renderAll(e,r,o,t,s){this.renderBoard(e,r,o),this.renderArrows(t),this.renderMoves(s)}}const y=new p("#boardContainer","#arrows","#moves"),h=new u(5,4,y);setTimeout(()=>h.movePlayer("North"),1e3);setTimeout(()=>h.movePlayer("east"),2e3);setTimeout(()=>h.movePlayer("s"),3e3);setTimeout(()=>h.movePlayer("W"),4e3);console.log(h.triggerEvents());console.log(h);
