var d=Object.defineProperty;var u=(n,e,r)=>e in n?d(n,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):n[e]=r;var a=(n,e,r)=>(u(n,typeof e!="symbol"?e+"":e,r),r);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))t(o);new MutationObserver(o=>{for(const s of o)if(s.type==="childList")for(const i of s.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&t(i)}).observe(document,{childList:!0,subtree:!0});function r(o){const s={};return o.integrity&&(s.integrity=o.integrity),o.referrerpolicy&&(s.referrerPolicy=o.referrerpolicy),o.crossorigin==="use-credentials"?s.credentials="include":o.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function t(o){if(o.ep)return;o.ep=!0;const s=r(o);fetch(o.href,s)}})();class c{constructor(e){a(this,"id");a(this,"hasWumpus");a(this,"hasHole");a(this,"hasBat");this.id=e,this.hasWumpus=!1,this.hasHole=!1,this.hasBat=!1}}function f(n,e){if(n*e<20)throw new Error("The gameboard is too small! Choose a bigger one.");const r=[];for(let t=0;t<n;t++){const o=[];for(let s=0;s<e;s++){const i=new c(s*n+t+1);Math.random()<.2?i.hasHole=!0:Math.random()<.3&&(i.hasBat=!0),o.push(i)}r.push(o)}for(;;){const t=Math.round(Math.random()*(n-1)),o=Math.round(Math.random()*(e-1)),s=r[t][o];if(!s.hasHole&&!s.hasBat){s.hasWumpus=!0;break}}return r}class p{constructor(){a(this,"arrowCount");a(this,"moveCount");a(this,"board");a(this,"playerX");a(this,"playerY");this.arrowCount=5,this.moveCount=0,this.board=f(5,4),this.playerX=this.playerPositionX(),this.playerY=this.playerPositionY()}playerPositionX(){let e=this.playerX;return e=Math.round(Math.random()*(this.board.length-1)),e}playerPositionY(){let e=this.playerY;return e=Math.round(Math.random()*(this.board[0].length-1)),e}movePlayer(e){let r=this.playerX,t=this.playerY;if(e==="North")t-=1,this.moveCount+=1;else if(e==="East")r+=1,this.moveCount+=1;else if(e==="South")t+=1,this.moveCount+=1;else if(e==="West")r-=1,this.moveCount+=1;else{console.log("Choose either North, East, South or West.");return}r===this.board.length?r=0:r===-1&&(r=this.board.length-1),t===this.board[0].length?t=0:t===-1&&(t=this.board[0].length-1),this.playerX=r,this.playerY=t}wumpusPosition(){for(let e=0;e<this.board[0].length;e++)for(let r=0;r<this.board.length;r++)this.board[r][e].hasWumpus}moveWumpus(){for(let e=0;e<this.board[0].length;e++)for(let r=0;r<this.board.length;r++)if(this.board[r][e].hasWumpus){let t=r+1,o=e;t===this.board.length?t=0:o===this.board[0].length&&(o=0),console.log(r),console.log(e),this.board[r][e].hasWumpus=!1,this.board[t][o].hasWumpus=!0;return}}}class m{constructor(e,r,t){a(this,"boardContainer");a(this,"arrowContainer");a(this,"moveContainer");this.boardContainer=document.querySelector(e),this.arrowContainer=document.querySelector(r),this.moveContainer=document.querySelector(t)}renderBoard(e){let r="";for(let t=0;t<e.board[0].length;t++){r+="<tr>";for(let o=0;o<e.board.length;o++)e.playerX===o&&e.playerY===t?r+=`<td class="board-square"> ${e.board[o][t].id} <img src="/player.jpg" width="50"></td>`:e.board[o][t].hasWumpus?r+=`<td class="board-square"> ${e.board[o][t].id} <img src="/wumpus.png" width="50"></td>`:e.board[o][t].hasHole?r+=`<td class="board-square"> ${e.board[o][t].id} <img src="/hole.jpg" width="50"></td>`:e.board[o][t].hasBat?r+=`<td class="board-square"> ${e.board[o][t].id} <img src="/bats.jpg" width="50"></td>`:r+=`<td class="board-square"> ${e.board[o][t].id} </td>`;r+="</tr>"}this.boardContainer.innerHTML=r}renderArrows(e){this.arrowContainer.innerHTML=e.arrowCount.toString()}renderMoves(e){this.moveContainer.innerHTML=e.moveCount.toString()}renderAll(e){this.renderBoard(e),this.renderArrows(e),this.renderMoves(e)}}const h=new m("#boardContainer","#arrows","#moves"),l=new p;h.renderAll(l);setTimeout(()=>h.renderAll(l),3e3);l.movePlayer("East");console.log(l.playerX);console.log(l.playerY);console.log(l.board);
