var c=Object.defineProperty;var m=(s,t,r)=>t in s?c(s,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):s[t]=r;var i=(s,t,r)=>(m(s,typeof t!="symbol"?t+"":t,r),r);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))o(e);new MutationObserver(e=>{for(const n of e)if(n.type==="childList")for(const h of n.addedNodes)h.tagName==="LINK"&&h.rel==="modulepreload"&&o(h)}).observe(document,{childList:!0,subtree:!0});function r(e){const n={};return e.integrity&&(n.integrity=e.integrity),e.referrerpolicy&&(n.referrerPolicy=e.referrerpolicy),e.crossorigin==="use-credentials"?n.credentials="include":e.crossorigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function o(e){if(e.ep)return;e.ep=!0;const n=r(e);fetch(e.href,n)}})();class g{constructor(t){i(this,"id");i(this,"hasWumpus");i(this,"hasHole");i(this,"hasBat");this.id=t,this.hasWumpus=!1,this.hasHole=!1,this.hasBat=!1}}var f=(s=>(s[s.Move=0]="Move",s[s.Shoot=1]="Shoot",s[s.Unknown=2]="Unknown",s))(f||{}),d=(s=>(s[s.North=0]="North",s[s.East=1]="East",s[s.South=2]="South",s[s.West=3]="West",s[s.Unknown=4]="Unknown",s))(d||{});class p{constructor(t,r){i(this,"input");i(this,"output");this.input=document.querySelector(t),this.output=document.querySelector(r)}writeLine(t){this.output.innerHTML+=`${t}
`,this.output.scrollTop=this.output.scrollHeight}inputLine(){const t=this.input.value;return this.writeLine(`> ${t}`),this.input.value="",t}disableInput(){this.input.disabled=!0}static parseDirection(t){return this.regexNorth.test(t)?d.North:this.regexEast.test(t)?d.East:this.regexSouth.test(t)?d.South:this.regexWest.test(t)?d.West:d.Unknown}static parseAction(t){return this.regexMove.test(t)?f.Move:this.regexShoot.test(t)?f.Shoot:f.Unknown}static isRestart(t){return this.regexRestart.test(t)}}i(p,"regexNorth",/^north|n$/i),i(p,"regexEast",/^east|e$/i),i(p,"regexSouth",/^south|s$/i),i(p,"regexWest",/^west|w$/i),i(p,"regexMove",/^move|m$/i),i(p,"regexShoot",/^shoot|s$/i),i(p,"regexRestart",/^restart$/i);var l=(s=>(s[s.Choose=0]="Choose",s[s.Move=1]="Move",s[s.Shoot=2]="Shoot",s[s.Won=3]="Won",s[s.Lost=4]="Lost",s))(l||{});class w{constructor(t,r,o,e=null){i(this,"width");i(this,"height");i(this,"arrowCount",5);i(this,"arrowMoveCount",0);i(this,"moveCount",0);i(this,"board",[]);i(this,"playerX",0);i(this,"playerY",0);i(this,"arrowX",-1);i(this,"arrowY",-1);i(this,"state",l.Choose);i(this,"gameOver",!1);i(this,"inputOutput");i(this,"renderer");this.width=t,this.height=r,this.inputOutput=o,this.renderer=e}start(){this.state=l.Choose,this.inputOutput.output.innerHTML="",this.generateGameboard(this.width,this.height),this.randomizePlayerPosition(),this.inputOutput.writeLine("Lets shoot Wumpus before he finds you!"),this.initRoom(),this.renderAll(),this.inputOutput.input.getAttribute("listener")!=="true"&&this.inputOutput.input.addEventListener("keyup",t=>{t.key==="Enter"&&(t.preventDefault(),t.target.setAttribute("listener","true"),this.gameLoop())})}renderAll(){this.renderer!=null&&this.renderer.renderAll(this.board,this.playerX,this.playerY,this.arrowX,this.arrowY,this.arrowCount,this.moveCount)}randomizePlayerPosition(){for(;;){this.playerX=Math.round(Math.random()*(this.board.length-1)),this.playerY=Math.round(Math.random()*(this.board[0].length-1));const t=this.board[this.playerX][this.playerY];if(!t.hasWumpus&&!t.hasHole&&!t.hasBat)return}}move(t,r){let o,e;if(t==="player"||this.arrowX===-1)o=this.playerX,e=this.playerY;else if(t==="arrow")o=this.arrowX,e=this.arrowY;else return;if(r===d.North)e--,t==="player"&&this.moveCount++;else if(r===d.East)o++,t==="player"&&this.moveCount++;else if(r===d.South)e++,t==="player"&&this.moveCount++;else if(r===d.West)o--,t==="player"&&this.moveCount++;else{this.inputOutput.writeLine("Choose either North, East, South or West.");return}o===this.board.length&&(o=0),o===-1&&(o=this.board.length-1),e===this.board[0].length&&(e=0),e===-1&&(e=this.board[0].length-1),t==="player"?(this.playerX=o,this.playerY=e):t==="arrow"&&(this.arrowX=o,this.arrowY=e),this.triggerEvents(),this.renderAll()}triggerEvents(){let t=this.board[this.playerX][this.playerY];t.hasWumpus&&(this.inputOutput.writeLine("Wumpus killed you.."),this.loseGame()),t.hasHole&&(this.inputOutput.writeLine("You fell into a hole.."),this.loseGame()),t.hasBat&&(this.randomizePlayerPosition(),t=this.board[this.playerX][this.playerY],this.inputOutput.writeLine(`You walked right into the bats! They flew away with you to room ${t.id}.`)),this.arrowCount<=0&&(this.inputOutput.writeLine("You ran out of arrows.."),this.loseGame()),this.playerX===this.arrowX&&this.playerY===this.arrowY&&(this.inputOutput.writeLine("You (hopefully) accidentally shot yourself.."),this.loseGame()),this.arrowX!==-1&&this.arrowY!==-1&&this.board[this.arrowX][this.arrowY].hasWumpus&&this.winGame()}adjacentRooms(){let t=this.playerY-1,r=this.playerX+1,o=this.playerY+1,e=this.playerX-1;r===this.board.length&&(r=0),e===-1&&(e=this.board.length-1),o===this.board[0].length&&(o=0),t===-1&&(t=this.board[0].length-1);const n=this.board[this.playerX][t],h=this.board[r][this.playerY],a=this.board[this.playerX][o],u=this.board[e][this.playerY];return[n,h,a,u]}initRoom(){let t=!1,r=!1,o=!1;const e=[];for(const n of this.adjacentRooms())e.push(` ${n.id}`),n.hasWumpus&&(t=!0),n.hasHole&&(r=!0),n.hasBat&&(o=!0);t&&this.inputOutput.writeLine("You smell of Wumpus!"),r&&this.inputOutput.writeLine("You sense the smell of sewage.."),o&&this.inputOutput.writeLine("You feel the wind coming from wingtips.."),this.inputOutput.writeLine(`You can go to rooms${e.toString()}.`),this.inputOutput.writeLine(`Would you like to move or shoot? (M, S) [${this.arrowCount} arrows left]`)}generateGameboard(t,r){if(t*r<20)throw new Error("The gameboard is too small! Choose a bigger one.");const o=[];for(let e=0;e<t;e++){const n=[];for(let h=0;h<r;h++){const a=new g(h*t+e+1);Math.random()<.2?a.hasHole=!0:Math.random()<.3&&(a.hasBat=!0),n.push(a)}o.push(n)}if(w.emptyRooms(o)<2){this.generateGameboard(t,r);return}w.randomizeWumpusPosition(o),this.board=o}gameLoop(){this.renderAll();const t=this.inputOutput.inputLine();if(p.isRestart(t))this.start();else if(this.state===l.Choose){const r=p.parseAction(t);r===f.Move?(this.state=l.Move,this.inputOutput.writeLine("In which direction would you like to go? (N, E, S, W)")):r===f.Shoot?(this.state=l.Shoot,this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")):this.inputOutput.writeLine(`Would you like to move or shoot? (M, S) [${this.arrowCount} arrows left]`)}else if(this.state===l.Move){const r=p.parseDirection(t);if(r!==d.Unknown){if(this.move("player",r),this.gameOver)return;this.initRoom(),this.state=l.Choose}else this.inputOutput.writeLine("In which direction would you like to go? (N, E, S, W)")}else if(this.state===l.Shoot){const r=p.parseDirection(t);if(r!==d.Unknown){if(this.move("arrow",r),this.gameOver)return;if(this.arrowMoveCount++,this.arrowMoveCount===3){if(this.state=l.Choose,this.arrowX=-1,this.arrowY=-1,this.arrowMoveCount=0,this.arrowCount--,this.triggerEvents(),this.renderAll(),this.gameOver)return;this.inputOutput.writeLine(`Would you like to move or shoot? (M, S) [${this.arrowCount} arrows left]`)}else this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")}else this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")}}winGame(){this.state=l.Won,this.gameOver=!0,this.inputOutput.writeLine("You have won!"),this.inputOutput.writeLine(`You defeated Wumpus after${this.moveCount<=5?" only":""} ${this.moveCount} moves!`),this.inputOutput.writeLine("Write 'restart' to play again.")}loseGame(){this.state=l.Lost,this.gameOver=!0,this.inputOutput.writeLine("You have lost the game.."),this.inputOutput.writeLine("Write 'restart' to play again.")}static randomizeWumpusPosition(t){for(;;){const r=Math.round(Math.random()*(t.length-1)),o=Math.round(Math.random()*(t[0].length-1)),e=t[r][o];if(!e.hasHole&&!e.hasBat){e.hasWumpus=!0;break}}}static emptyRooms(t){let r=0;for(let o=0;o<t[0].length;o++)for(let e=0;e<t.length;e++){const n=t[e][o];!n.hasHole&&!n.hasBat&&r++}return r}}class y{constructor(t,r,o){i(this,"boardContainer");i(this,"arrowContainer");i(this,"moveContainer");this.boardContainer=document.querySelector(t),this.arrowContainer=document.querySelector(r),this.moveContainer=document.querySelector(o)}renderBoard(t,r,o,e,n){let h="";for(let a=0;a<t[0].length;a++){h+="<tr>";for(let u=0;u<t.length;u++)r===u&&o===a?h+=`<td class="board-square"> ${t[u][a].id}
          <img src="player.jpg" alt="a drawn game hand console" width="50"></td>`:e===u&&n===a?h+=`<td class="board-square"> ${t[u][a].id}
          <img src="arrow.jpg" alt="a drawn arrow" width="50"></td>`:t[u][a].hasWumpus?h+=`<td class="board-square"> ${t[u][a].id}
          <img src="wumpus.png" alt="a red drawn monster" width="50"></td>`:t[u][a].hasHole?h+=`<td class="board-square"> ${t[u][a].id}
          <img src="hole.jpg" alt="a hole in the ground" width="50"></td>`:t[u][a].hasBat?h+=`<td class="board-square"> ${t[u][a].id}
          <img src="bats.jpg" alt="multiple cartoon bats" width="50"></td>`:h+=`<td class="board-square"> ${t[u][a].id} </td>`;h+="</tr>"}this.boardContainer.innerHTML=h}renderArrows(t){this.arrowContainer.innerHTML=`Arrows left: ${t.toString()}`}renderMoves(t){this.moveContainer.innerHTML=`Moves: ${t.toString()}`}renderAll(t,r,o,e,n,h,a){this.renderBoard(t,r,o,e,n),this.renderArrows(h),this.renderMoves(a)}}const v=new p("#input","#output"),L=new y("#boardContainer","#arrows","#moves"),C=new w(5,4,v,L);C.start();
