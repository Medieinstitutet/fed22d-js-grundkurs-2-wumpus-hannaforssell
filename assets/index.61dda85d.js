var p=Object.defineProperty;var d=(h,t,o)=>t in h?p(h,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):h[t]=o;var u=(h,t,o)=>(d(h,typeof t!="symbol"?t+"":t,o),o);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))s(e);new MutationObserver(e=>{for(const r of e)if(r.type==="childList")for(const n of r.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&s(n)}).observe(document,{childList:!0,subtree:!0});function o(e){const r={};return e.integrity&&(r.integrity=e.integrity),e.referrerpolicy&&(r.referrerPolicy=e.referrerpolicy),e.crossorigin==="use-credentials"?r.credentials="include":e.crossorigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(e){if(e.ep)return;e.ep=!0;const r=o(e);fetch(e.href,r)}})();class c{constructor(t){u(this,"id");u(this,"hasWumpus");u(this,"hasHole");u(this,"hasBat");this.id=t,this.hasWumpus=!1,this.hasHole=!1,this.hasBat=!1}}class l{constructor(t,o,s,e=null){u(this,"arrowCount");u(this,"arrowMoveCount",0);u(this,"moveCount");u(this,"board",[]);u(this,"playerX",0);u(this,"playerY",0);u(this,"arrowX",-1);u(this,"arrowY",-1);u(this,"state","Choose");u(this,"inputOutput");u(this,"renderer");this.arrowCount=5,this.moveCount=0,this.generateGameboard(t,o),this.randomizePlayerPosition(),this.inputOutput=s,this.inputOutput.input.addEventListener("keyup",r=>{r.key==="Enter"&&(r.preventDefault(),this.gameLoop())}),this.inputOutput.writeLine("Lets find Wumpus before he finds you!"),this.initRoom(),this.renderer=e,this.renderAll()}renderAll(){this.renderer!=null&&this.renderer.renderAll(this.board,this.playerX,this.playerY,this.arrowX,this.arrowY,this.arrowCount,this.moveCount)}randomizePlayerPosition(){for(;;){this.playerX=Math.round(Math.random()*(this.board.length-1)),this.playerY=Math.round(Math.random()*(this.board[0].length-1));const t=this.board[this.playerX][this.playerY];if(!t.hasWumpus&&!t.hasHole&&!t.hasBat)return}}move(t,o){let s,e;if(t==="player"||this.arrowX===-1)s=this.playerX,e=this.playerY;else if(t==="arrow")s=this.arrowX,e=this.arrowY;else return;const r=/^north|n$/i,n=/^east|e$/i,i=/^south|s$/i,a=/^west|w$/i;if(r.test(o))e--,t==="player"&&this.moveCount++;else if(n.test(o))s++,t==="player"&&this.moveCount++;else if(i.test(o))e++,t==="player"&&this.moveCount++;else if(a.test(o))s--,t==="player"&&this.moveCount++;else{this.inputOutput.writeLine("Choose either North, East, South or West.");return}s===this.board.length&&(s=0),s===-1&&(s=this.board.length-1),e===this.board[0].length&&(e=0),e===-1&&(e=this.board[0].length-1),t==="player"?(this.playerX=s,this.playerY=e):t==="arrow"&&(this.arrowX=s,this.arrowY=e),this.triggerEvents(),this.renderAll()}triggerEvents(){const t=this.board[this.playerX][this.playerY];t.hasWumpus&&(this.inputOutput.writeLine("Wumpus killed you.."),this.loseGame()),t.hasHole&&(this.inputOutput.writeLine("You fell into a hole.."),this.loseGame()),t.hasBat&&(this.randomizePlayerPosition(),this.inputOutput.writeLine("You walked right into the bats! They flew away with you.")),this.playerX===this.arrowX&&this.playerY===this.arrowY&&(this.inputOutput.writeLine("You (hopefully) accidentally shot yourself.."),this.loseGame()),this.arrowX!==-1&&this.arrowY!==-1&&this.board[this.arrowX][this.arrowY].hasWumpus&&this.winGame()}adjacentRooms(){let t=this.playerY-1,o=this.playerX+1,s=this.playerY+1,e=this.playerX-1;o===this.board.length&&(o=0),e===-1&&(e=this.board.length-1),s===this.board[0].length&&(s=0),t===-1&&(t=this.board[0].length-1);const r=this.board[this.playerX][t],n=this.board[o][this.playerY],i=this.board[this.playerX][s],a=this.board[e][this.playerY];return[r,n,i,a]}initRoom(){let t=!1,o=!1,s=!1;const e=[];for(const r of this.adjacentRooms())e.push(` ${r.id}`),r.hasWumpus&&(t=!0),r.hasHole&&(o=!0),r.hasBat&&(s=!0);t&&this.inputOutput.writeLine("You smell of Wumpus!"),o&&this.inputOutput.writeLine("You sense the smell of sewage.."),s&&this.inputOutput.writeLine("You feel the wind coming from wingtips.."),this.inputOutput.writeLine(`You can go to rooms${e.toString()}.`),this.inputOutput.writeLine("Would you like to move or shoot? (M, S)")}wumpusPosition(){for(let t=0;t<this.board[0].length;t++)for(let o=0;o<this.board.length;o++)this.board[o][t].hasWumpus}moveWumpus(){for(let t=0;t<this.board[0].length;t++)for(let o=0;o<this.board.length;o++)if(this.board[o][t].hasWumpus){let s=o+1,e=t;s===this.board.length?s=0:e===this.board[0].length&&(e=0),console.log(o),console.log(t),this.board[o][t].hasWumpus=!1,this.board[s][e].hasWumpus=!0;return}}generateGameboard(t,o){if(t*o<20)throw new Error("The gameboard is too small! Choose a bigger one.");const s=[];for(let e=0;e<t;e++){const r=[];for(let n=0;n<o;n++){const i=new c(n*t+e+1);Math.random()<.2?i.hasHole=!0:Math.random()<.3&&(i.hasBat=!0),r.push(i)}s.push(r)}if(l.emptyRooms(s)<2){this.generateGameboard(t,o);return}l.randomizeWumpusPosition(s),this.board=s}gameLoop(){this.renderAll();const t=/^move|m$/i,o=/^shoot|s$/i,s=/^north|n$/i,e=/^east|e$/i,r=/^south|s$/i,n=/^west|w$/i;if(this.state==="Choose"){const i=this.inputOutput.inputLine();t.test(i)?(this.state="Move",this.inputOutput.writeLine("In which direction would you like to go? (N, E, S, W)")):o.test(i)?(this.state="Shoot",this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)"),this.arrowCount--):this.inputOutput.writeLine("Would you like to move or shoot? (M, S)")}else if(this.state==="Move"){const i=this.inputOutput.inputLine();s.test(i)||e.test(i)||r.test(i)||n.test(i)?(this.move("player",i),this.initRoom()):this.inputOutput.writeLine("In which direction would you like to go? (N, E, S, W)")}else if(this.state==="Shoot"){const i=this.inputOutput.inputLine();s.test(i)||e.test(i)||r.test(i)||n.test(i)?(this.move("arrow",i),this.arrowMoveCount++,this.arrowMoveCount===3&&this.inputOutput.input.disabled===!1&&(this.state="Choose",this.arrowX=-1,this.arrowY=-1,this.inputOutput.writeLine("Would you like to move or shoot? (M, S)"))):this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")}}winGame(){this.state="Won",this.inputOutput.writeLine("You have won!"),this.inputOutput.writeLine(`You defeated Wumpus after only ${this.moveCount} moves!`),this.inputOutput.disableInput()}loseGame(){this.inputOutput.writeLine("You have lost the game.."),this.inputOutput.disableInput()}static randomizeWumpusPosition(t){for(;;){const o=Math.round(Math.random()*(t.length-1)),s=Math.round(Math.random()*(t[0].length-1)),e=t[o][s];if(!e.hasHole&&!e.hasBat){e.hasWumpus=!0;break}}}static emptyRooms(t){let o=0;for(let s=0;s<t[0].length;s++)for(let e=0;e<t.length;e++){const r=t[e][s];!r.hasHole&&!r.hasBat&&o++}return o}}class f{constructor(t,o,s){u(this,"boardContainer");u(this,"arrowContainer");u(this,"moveContainer");this.boardContainer=document.querySelector(t),this.arrowContainer=document.querySelector(o),this.moveContainer=document.querySelector(s)}renderBoard(t,o,s,e,r){let n="";for(let i=0;i<t[0].length;i++){n+="<tr>";for(let a=0;a<t.length;a++)o===a&&s===i?n+=`<td class="board-square"> ${t[a][i].id}
          <img src="player.jpg" alt="a drawn game hand console" width="50"></td>`:e===a&&r===i?n+=`<td class="board-square"> ${t[a][i].id}
          <img src="arrow.jpg" alt="a drawn arrow" width="50"></td>`:t[a][i].hasWumpus?n+=`<td class="board-square"> ${t[a][i].id}
          <img src="wumpus.png" alt="a red drawn monster" width="50"></td>`:t[a][i].hasHole?n+=`<td class="board-square"> ${t[a][i].id}
          <img src="hole.jpg" alt="a hole in the ground" width="50"></td>`:t[a][i].hasBat?n+=`<td class="board-square"> ${t[a][i].id}
          <img src="bats.jpg" alt="multiple cartoon bats" width="50"></td>`:n+=`<td class="board-square"> ${t[a][i].id} </td>`;n+="</tr>"}this.boardContainer.innerHTML=n}renderArrows(t){this.arrowContainer.innerHTML=t.toString()}renderMoves(t){this.moveContainer.innerHTML=t.toString()}renderAll(t,o,s,e,r,n,i){this.renderBoard(t,o,s,e,r),this.renderArrows(n),this.renderMoves(i)}}class m{constructor(t,o){u(this,"input");u(this,"output");this.input=document.querySelector(t),this.output=document.querySelector(o)}writeLine(t){this.output.innerHTML+=`${t}
`,this.autoScrollDown()}inputLine(){const t=this.input.value;return this.writeLine(`> ${t}`),this.input.value="",t}disableInput(){this.input.disabled=!0}autoScrollDown(){this.output.scrollTop=this.output.scrollHeight}}const w=new m("#input","#output"),y=new f("#boardContainer","#arrows","#moves"),g=new l(5,4,w,y);console.log(g);
