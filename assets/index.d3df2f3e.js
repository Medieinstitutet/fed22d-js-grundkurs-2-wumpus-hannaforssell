var f=Object.defineProperty;var m=(n,t,s)=>t in n?f(n,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):n[t]=s;var r=(n,t,s)=>(m(n,typeof t!="symbol"?t+"":t,s),s);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))o(e);new MutationObserver(e=>{for(const i of e)if(i.type==="childList")for(const u of i.addedNodes)u.tagName==="LINK"&&u.rel==="modulepreload"&&o(u)}).observe(document,{childList:!0,subtree:!0});function s(e){const i={};return e.integrity&&(i.integrity=e.integrity),e.referrerpolicy&&(i.referrerPolicy=e.referrerpolicy),e.crossorigin==="use-credentials"?i.credentials="include":e.crossorigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function o(e){if(e.ep)return;e.ep=!0;const i=s(e);fetch(e.href,i)}})();class w{constructor(t){r(this,"id");r(this,"hasWumpus");r(this,"hasHole");r(this,"hasBat");this.id=t,this.hasWumpus=!1,this.hasHole=!1,this.hasBat=!1}}var l=(n=>(n[n.North=0]="North",n[n.East=1]="East",n[n.South=2]="South",n[n.West=3]="West",n[n.Unknown=4]="Unknown",n))(l||{});class d{constructor(t,s){r(this,"input");r(this,"output");this.input=document.querySelector(t),this.output=document.querySelector(s)}writeLine(t){this.output.innerHTML+=`${t}
`,this.output.scrollTop=this.output.scrollHeight}inputLine(){const t=this.input.value;return this.writeLine(`> ${t}`),this.input.value="",t}disableInput(){this.input.disabled=!0}static parseDirection(t){const s=/^north|n$/i,o=/^east|e$/i,e=/^south|s$/i,i=/^west|w$/i;return s.test(t)?l.North:o.test(t)?l.East:e.test(t)?l.South:i.test(t)?l.West:l.Unknown}}class p{constructor(t,s,o,e=null){r(this,"arrowCount",5);r(this,"arrowMoveCount",0);r(this,"moveCount",0);r(this,"board",[]);r(this,"playerX",0);r(this,"playerY",0);r(this,"arrowX",-1);r(this,"arrowY",-1);r(this,"state","Choose");r(this,"gameOver",!1);r(this,"inputOutput");r(this,"renderer");this.generateGameboard(t,s),this.randomizePlayerPosition(),this.inputOutput=o,this.renderer=e}start(){this.inputOutput.input.addEventListener("keyup",t=>{t.key==="Enter"&&(t.preventDefault(),this.gameLoop())}),this.inputOutput.writeLine("Lets find Wumpus before he finds you!"),this.initRoom(),this.renderAll()}renderAll(){this.renderer!=null&&this.renderer.renderAll(this.board,this.playerX,this.playerY,this.arrowX,this.arrowY,this.arrowCount,this.moveCount)}randomizePlayerPosition(){for(;;){this.playerX=Math.round(Math.random()*(this.board.length-1)),this.playerY=Math.round(Math.random()*(this.board[0].length-1));const t=this.board[this.playerX][this.playerY];if(!t.hasWumpus&&!t.hasHole&&!t.hasBat)return}}move(t,s){let o,e;if(t==="player"||this.arrowX===-1)o=this.playerX,e=this.playerY;else if(t==="arrow")o=this.arrowX,e=this.arrowY;else return;if(s===l.North)e--,t==="player"&&this.moveCount++;else if(s===l.East)o++,t==="player"&&this.moveCount++;else if(s===l.South)e++,t==="player"&&this.moveCount++;else if(s===l.West)o--,t==="player"&&this.moveCount++;else{this.inputOutput.writeLine("Choose either North, East, South or West.");return}o===this.board.length&&(o=0),o===-1&&(o=this.board.length-1),e===this.board[0].length&&(e=0),e===-1&&(e=this.board[0].length-1),t==="player"?(this.playerX=o,this.playerY=e):t==="arrow"&&(this.arrowX=o,this.arrowY=e),this.triggerEvents(),this.renderAll()}triggerEvents(){let t=this.board[this.playerX][this.playerY];t.hasWumpus&&(this.inputOutput.writeLine("Wumpus killed you.."),this.loseGame()),t.hasHole&&(this.inputOutput.writeLine("You fell into a hole.."),this.loseGame()),t.hasBat&&(this.randomizePlayerPosition(),t=this.board[this.playerX][this.playerY],this.inputOutput.writeLine(`You walked right into the bats! They flew away with you to room ${t.id}.`)),this.arrowCount<=0&&(this.inputOutput.writeLine("You ran out of arrows.."),this.loseGame()),this.playerX===this.arrowX&&this.playerY===this.arrowY&&(this.inputOutput.writeLine("You (hopefully) accidentally shot yourself.."),this.loseGame()),this.arrowX!==-1&&this.arrowY!==-1&&this.board[this.arrowX][this.arrowY].hasWumpus&&this.winGame()}adjacentRooms(){let t=this.playerY-1,s=this.playerX+1,o=this.playerY+1,e=this.playerX-1;s===this.board.length&&(s=0),e===-1&&(e=this.board.length-1),o===this.board[0].length&&(o=0),t===-1&&(t=this.board[0].length-1);const i=this.board[this.playerX][t],u=this.board[s][this.playerY],a=this.board[this.playerX][o],h=this.board[e][this.playerY];return[i,u,a,h]}initRoom(){let t=!1,s=!1,o=!1;const e=[];for(const i of this.adjacentRooms())e.push(` ${i.id}`),i.hasWumpus&&(t=!0),i.hasHole&&(s=!0),i.hasBat&&(o=!0);t&&this.inputOutput.writeLine("You smell of Wumpus!"),s&&this.inputOutput.writeLine("You sense the smell of sewage.."),o&&this.inputOutput.writeLine("You feel the wind coming from wingtips.."),this.inputOutput.writeLine(`You can go to rooms${e.toString()}.`),this.inputOutput.writeLine("Would you like to move or shoot? (M, S)")}wumpusPosition(){for(let t=0;t<this.board[0].length;t++)for(let s=0;s<this.board.length;s++)this.board[s][t].hasWumpus}moveWumpus(){for(let t=0;t<this.board[0].length;t++)for(let s=0;s<this.board.length;s++)if(this.board[s][t].hasWumpus){let o=s+1,e=t;o===this.board.length?o=0:e===this.board[0].length&&(e=0),console.log(s),console.log(t),this.board[s][t].hasWumpus=!1,this.board[o][e].hasWumpus=!0;return}}generateGameboard(t,s){if(t*s<20)throw new Error("The gameboard is too small! Choose a bigger one.");const o=[];for(let e=0;e<t;e++){const i=[];for(let u=0;u<s;u++){const a=new w(u*t+e+1);Math.random()<.2?a.hasHole=!0:Math.random()<.3&&(a.hasBat=!0),i.push(a)}o.push(i)}if(p.emptyRooms(o)<2){this.generateGameboard(t,s);return}p.randomizeWumpusPosition(o),this.board=o}gameLoop(){this.renderAll();const t=/^move|m$/i,s=/^shoot|s$/i;if(this.state==="Choose"){const o=this.inputOutput.inputLine();t.test(o)?(this.state="Move",this.inputOutput.writeLine("In which direction would you like to go? (N, E, S, W)")):s.test(o)?(this.state="Shoot",this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")):this.inputOutput.writeLine("Would you like to move or shoot? (M, S)")}else if(this.state==="Move"){const o=this.inputOutput.inputLine(),e=d.parseDirection(o);if(e!==l.Unknown){if(this.move("player",e),this.gameOver)return;this.initRoom(),this.state="Choose"}else this.inputOutput.writeLine("In which direction would you like to go? (N, E, S, W)")}else if(this.state==="Shoot"){const o=this.inputOutput.inputLine(),e=d.parseDirection(o);if(e!==l.Unknown){if(this.move("arrow",e),this.gameOver)return;if(this.arrowMoveCount++,this.arrowMoveCount===3){if(this.state="Choose",this.arrowX=-1,this.arrowY=-1,this.arrowMoveCount=0,this.arrowCount--,this.triggerEvents(),this.renderAll(),this.gameOver)return;this.inputOutput.writeLine("Would you like to move or shoot? (M, S)")}else this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")}else this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")}}winGame(){this.state="Won",this.gameOver=!0,this.inputOutput.writeLine("You have won!"),this.inputOutput.writeLine(`You defeated Wumpus after${this.moveCount<=5?" only":""} ${this.moveCount} moves!`),this.inputOutput.disableInput()}loseGame(){this.state="Lost",this.gameOver=!0,this.inputOutput.writeLine("You have lost the game.."),this.inputOutput.disableInput()}static randomizeWumpusPosition(t){for(;;){const s=Math.round(Math.random()*(t.length-1)),o=Math.round(Math.random()*(t[0].length-1)),e=t[s][o];if(!e.hasHole&&!e.hasBat){e.hasWumpus=!0;break}}}static emptyRooms(t){let s=0;for(let o=0;o<t[0].length;o++)for(let e=0;e<t.length;e++){const i=t[e][o];!i.hasHole&&!i.hasBat&&s++}return s}}class c{constructor(t,s,o){r(this,"boardContainer");r(this,"arrowContainer");r(this,"moveContainer");this.boardContainer=document.querySelector(t),this.arrowContainer=document.querySelector(s),this.moveContainer=document.querySelector(o)}renderBoard(t,s,o,e,i){let u="";for(let a=0;a<t[0].length;a++){u+="<tr>";for(let h=0;h<t.length;h++)s===h&&o===a?u+=`<td class="board-square"> ${t[h][a].id}
          <img src="player.jpg" alt="a drawn game hand console" width="50"></td>`:e===h&&i===a?u+=`<td class="board-square"> ${t[h][a].id}
          <img src="arrow.jpg" alt="a drawn arrow" width="50"></td>`:t[h][a].hasWumpus?u+=`<td class="board-square"> ${t[h][a].id}
          <img src="wumpus.png" alt="a red drawn monster" width="50"></td>`:t[h][a].hasHole?u+=`<td class="board-square"> ${t[h][a].id}
          <img src="hole.jpg" alt="a hole in the ground" width="50"></td>`:t[h][a].hasBat?u+=`<td class="board-square"> ${t[h][a].id}
          <img src="bats.jpg" alt="multiple cartoon bats" width="50"></td>`:u+=`<td class="board-square"> ${t[h][a].id} </td>`;u+="</tr>"}this.boardContainer.innerHTML=u}renderArrows(t){this.arrowContainer.innerHTML=`Arrows left: ${t.toString()}`}renderMoves(t){this.moveContainer.innerHTML=`Moves: ${t.toString()}`}renderAll(t,s,o,e,i,u,a){this.renderBoard(t,s,o,e,i),this.renderArrows(u),this.renderMoves(a)}}const y=new d("#input","#output"),g=new c("#boardContainer","#arrows","#moves"),v=new p(5,4,y,g);v.start();
