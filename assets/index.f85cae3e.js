var c=Object.defineProperty;var m=(i,t,e)=>t in i?c(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e;var o=(i,t,e)=>(m(i,typeof t!="symbol"?t+"":t,e),e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))r(s);new MutationObserver(s=>{for(const n of s)if(n.type==="childList")for(const h of n.addedNodes)h.tagName==="LINK"&&h.rel==="modulepreload"&&r(h)}).observe(document,{childList:!0,subtree:!0});function e(s){const n={};return s.integrity&&(n.integrity=s.integrity),s.referrerpolicy&&(n.referrerPolicy=s.referrerpolicy),s.crossorigin==="use-credentials"?n.credentials="include":s.crossorigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function r(s){if(s.ep)return;s.ep=!0;const n=e(s);fetch(s.href,n)}})();class g{constructor(t){o(this,"id");o(this,"hasWumpus");o(this,"hasHole");o(this,"hasBat");this.id=t,this.hasWumpus=!1,this.hasHole=!1,this.hasBat=!1}}var w=(i=>(i[i.Move=0]="Move",i[i.Shoot=1]="Shoot",i[i.Unknown=2]="Unknown",i))(w||{}),d=(i=>(i[i.North=0]="North",i[i.East=1]="East",i[i.South=2]="South",i[i.West=3]="West",i[i.Unknown=4]="Unknown",i))(d||{});class l{constructor(t,e){o(this,"input");o(this,"output");this.input=document.querySelector(t),this.output=document.querySelector(e)}writeLine(t){this.output.innerHTML+=`${t}
`,this.output.scrollTop=this.output.scrollHeight}inputLine(){const t=this.input.value;return this.writeLine(`> ${t}`),this.input.value="",t}disableInput(){this.input.disabled=!0}static parseDirection(t){return this.regexNorth.test(t)?d.North:this.regexEast.test(t)?d.East:this.regexSouth.test(t)?d.South:this.regexWest.test(t)?d.West:d.Unknown}static parseAction(t){return this.regexMove.test(t)?w.Move:this.regexShoot.test(t)?w.Shoot:w.Unknown}static isRestart(t){const e=this.regexRestart.exec(t);if(console.log(e),e===null)return[!1,0,0];const r=Number(e[1]),s=Number(e[2]);return r===0||s===0?[!0,0,0]:[!0,r,s]}static isCheat(t){return this.regexCheat.test(t)}}o(l,"regexNorth",/^(north|n)$/i),o(l,"regexEast",/^(east|e)$/i),o(l,"regexSouth",/^(south|s)$/i),o(l,"regexWest",/^(west|w)$/i),o(l,"regexMove",/^(move|m)$/i),o(l,"regexShoot",/^(shoot|s)$/i),o(l,"regexRestart",/^restart ?([\d]*) ?([\d]*)$/i),o(l,"regexCheat",/^cheat$/i);var p=(i=>(i[i.Choose=0]="Choose",i[i.Move=1]="Move",i[i.Shoot=2]="Shoot",i[i.Won=3]="Won",i[i.Lost=4]="Lost",i))(p||{});class f{constructor(t,e){o(this,"width",5);o(this,"height",4);o(this,"arrowCount",5);o(this,"arrowMoveCount",0);o(this,"moveCount",0);o(this,"board",[]);o(this,"playerX",0);o(this,"playerY",0);o(this,"arrowX",-1);o(this,"arrowY",-1);o(this,"state",p.Choose);o(this,"gameOver",!1);o(this,"inputOutput");o(this,"useRenderer",!1);o(this,"renderer");this.inputOutput=t,this.renderer=e}start(t,e){this.width=t,this.height=e,this.state=p.Choose,this.inputOutput.output.innerHTML="",this.generateGameboard(this.width,this.height),this.randomizePlayerPosition(),this.gameOver=!1,this.arrowCount=5,this.arrowMoveCount=0,this.moveCount=0,this.arrowX=-1,this.arrowY=-1,this.inputOutput.writeLine("Lets shoot Wumpus before he finds you!"),this.initRoom(),this.renderAll(),this.inputOutput.input.getAttribute("listener")!=="true"&&this.inputOutput.input.addEventListener("keyup",r=>{r.key==="Enter"&&(r.preventDefault(),r.target.setAttribute("listener","true"),this.gameLoop())})}renderAll(){this.useRenderer?this.renderer.renderAll(this.board,this.playerX,this.playerY,this.arrowX,this.arrowY,this.arrowCount,this.moveCount):this.renderer.clear()}randomizePlayerPosition(){for(;;){this.playerX=Math.round(Math.random()*(this.board.length-1)),this.playerY=Math.round(Math.random()*(this.board[0].length-1));const t=this.board[this.playerX][this.playerY];if(!t.hasWumpus&&!t.hasHole&&!t.hasBat)return}}move(t,e){let r,s;if(t==="player"||this.arrowX===-1)r=this.playerX,s=this.playerY;else if(t==="arrow")r=this.arrowX,s=this.arrowY;else return;if(e===d.North)s--,t==="player"&&this.moveCount++;else if(e===d.East)r++,t==="player"&&this.moveCount++;else if(e===d.South)s++,t==="player"&&this.moveCount++;else if(e===d.West)r--,t==="player"&&this.moveCount++;else{this.inputOutput.writeLine("Choose either North, East, South or West.");return}r===this.board.length&&(r=0),r===-1&&(r=this.board.length-1),s===this.board[0].length&&(s=0),s===-1&&(s=this.board[0].length-1),t==="player"?(this.playerX=r,this.playerY=s):t==="arrow"&&(this.arrowX=r,this.arrowY=s),this.triggerEvents(),this.renderAll()}triggerEvents(){let t=this.board[this.playerX][this.playerY];t.hasWumpus&&(this.inputOutput.writeLine("Wumpus killed you.."),this.loseGame()),t.hasHole&&(this.inputOutput.writeLine("You fell into a hole.."),this.loseGame()),t.hasBat&&(this.randomizePlayerPosition(),t=this.board[this.playerX][this.playerY],this.inputOutput.writeLine(`You walked right into the bats! They flew away with you to room ${t.id}.`)),this.arrowCount<=0&&(this.inputOutput.writeLine("You ran out of arrows.."),this.loseGame()),this.playerX===this.arrowX&&this.playerY===this.arrowY&&(this.inputOutput.writeLine("You (hopefully) accidentally shot yourself.."),this.loseGame()),this.arrowX!==-1&&this.arrowY!==-1&&this.board[this.arrowX][this.arrowY].hasWumpus&&this.winGame()}adjacentRooms(){let t=this.playerY-1,e=this.playerX+1,r=this.playerY+1,s=this.playerX-1;e===this.board.length&&(e=0),s===-1&&(s=this.board.length-1),r===this.board[0].length&&(r=0),t===-1&&(t=this.board[0].length-1);const n=this.board[this.playerX][t],h=this.board[e][this.playerY],a=this.board[this.playerX][r],u=this.board[s][this.playerY];return[n,h,a,u]}initRoom(){let t=!1,e=!1,r=!1;const s=[];for(const n of this.adjacentRooms())s.push(` ${n.id}`),n.hasWumpus&&(t=!0),n.hasHole&&(e=!0),n.hasBat&&(r=!0);t&&this.inputOutput.writeLine("You smell of Wumpus!"),e&&this.inputOutput.writeLine("You sense the smell of sewage.."),r&&this.inputOutput.writeLine("You feel the wind coming from wingtips.."),this.inputOutput.writeLine(`You can go to rooms${s.toString()}.`),this.inputOutput.writeLine(`Would you like to move or shoot? (M, S) [${this.arrowCount} arrows left]`)}generateGameboard(t,e){if(t*e<20)throw new Error("The gameboard is too small! Choose a bigger one.");const r=[];for(let s=0;s<t;s++){const n=[];for(let h=0;h<e;h++){const a=new g(h*t+s+1);Math.random()<.2?a.hasHole=!0:Math.random()<.3&&(a.hasBat=!0),n.push(a)}r.push(n)}if(f.emptyRooms(r)<2){this.generateGameboard(t,e);return}f.randomizeWumpusPosition(r),this.board=r}gameLoop(){this.renderAll();const t=this.inputOutput.inputLine(),e=l.isRestart(t);if(e[0])e[1]!==0&&e[2]!==0?e[1]*e[2]<20?this.inputOutput.writeLine("The gameboard is too small! Choose a bigger one."):this.start(e[1],e[2]):this.start(this.width,this.height);else if(l.isCheat(t))this.useRenderer=!this.useRenderer,this.inputOutput.writeLine(`Cheats ${this.useRenderer?"activated":"deactivated"}`),this.renderAll();else if(this.state===p.Choose){const r=l.parseAction(t);r===w.Move?(this.state=p.Move,this.inputOutput.writeLine("In which direction would you like to go? (N, E, S, W)")):r===w.Shoot?(this.state=p.Shoot,this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")):this.inputOutput.writeLine(`Would you like to move or shoot? (M, S) [${this.arrowCount} arrows left]`)}else if(this.state===p.Move){const r=l.parseDirection(t);if(r!==d.Unknown){if(this.move("player",r),this.gameOver)return;this.initRoom(),this.state=p.Choose}else this.inputOutput.writeLine("In which direction would you like to go? (N, E, S, W)")}else if(this.state===p.Shoot){const r=l.parseDirection(t);if(r!==d.Unknown){if(this.move("arrow",r),this.gameOver)return;if(this.arrowMoveCount++,this.arrowMoveCount===3){if(this.state=p.Choose,this.arrowX=-1,this.arrowY=-1,this.arrowMoveCount=0,this.arrowCount--,this.triggerEvents(),this.renderAll(),this.gameOver)return;this.inputOutput.writeLine(`Would you like to move or shoot? (M, S) [${this.arrowCount} arrows left]`)}else this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")}else this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")}}winGame(){this.state=p.Won,this.gameOver=!0,this.inputOutput.writeLine("You have won!"),this.inputOutput.writeLine(`You defeated Wumpus after${this.moveCount<=5?" only":""} ${this.moveCount} moves!`),this.inputOutput.writeLine("Write 'restart' to play again."),this.inputOutput.writeLine("Or write for example 'restart 10 10' to change the board size.")}loseGame(){this.state=p.Lost,this.gameOver=!0,this.inputOutput.writeLine("You have lost the game.."),this.inputOutput.writeLine("Write 'restart' to play again."),this.inputOutput.writeLine("Or write for example 'restart 10 10' to change the board size.")}static randomizeWumpusPosition(t){for(;;){const e=Math.round(Math.random()*(t.length-1)),r=Math.round(Math.random()*(t[0].length-1)),s=t[e][r];if(!s.hasHole&&!s.hasBat){s.hasWumpus=!0;break}}}static emptyRooms(t){let e=0;for(let r=0;r<t[0].length;r++)for(let s=0;s<t.length;s++){const n=t[s][r];!n.hasHole&&!n.hasBat&&e++}return e}}class y{constructor(t,e,r){o(this,"boardContainer");o(this,"arrowContainer");o(this,"moveContainer");this.boardContainer=document.querySelector(t),this.arrowContainer=document.querySelector(e),this.moveContainer=document.querySelector(r)}renderBoard(t,e,r,s,n){let h="";for(let a=0;a<t[0].length;a++){h+="<tr>";for(let u=0;u<t.length;u++)e===u&&r===a?h+=`<td class="board-square"> ${t[u][a].id}
          <img src="player.jpg" alt="a drawn game hand console" width="50"></td>`:s===u&&n===a?h+=`<td class="board-square"> ${t[u][a].id}
          <img src="arrow.jpg" alt="a drawn arrow" width="50"></td>`:t[u][a].hasWumpus?h+=`<td class="board-square"> ${t[u][a].id}
          <img src="wumpus.png" alt="a red drawn monster" width="50"></td>`:t[u][a].hasHole?h+=`<td class="board-square"> ${t[u][a].id}
          <img src="hole.jpg" alt="a hole in the ground" width="50"></td>`:t[u][a].hasBat?h+=`<td class="board-square"> ${t[u][a].id}
          <img src="bats.jpg" alt="multiple cartoon bats" width="50"></td>`:h+=`<td class="board-square"> ${t[u][a].id} </td>`;h+="</tr>"}this.boardContainer.innerHTML=h}renderArrows(t){this.arrowContainer.innerHTML=`Arrows left: ${t.toString()}`}renderMoves(t){this.moveContainer.innerHTML=`Moves: ${t.toString()}`}renderAll(t,e,r,s,n,h,a){this.renderBoard(t,e,r,s,n),this.renderArrows(h),this.renderMoves(a)}clear(){this.boardContainer.innerHTML="",this.arrowContainer.innerHTML="",this.moveContainer.innerHTML=""}}const v=new l("#input","#output"),C=new y("#boardContainer","#arrows","#moves"),L=new f(v,C);L.start(5,4);
