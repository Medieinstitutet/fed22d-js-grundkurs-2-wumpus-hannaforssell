var d=Object.defineProperty;var u=(a,e,r)=>e in a?d(a,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):a[e]=r;var n=(a,e,r)=>(u(a,typeof e!="symbol"?e+"":e,r),r);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))o(t);new MutationObserver(t=>{for(const s of t)if(s.type==="childList")for(const i of s.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&o(i)}).observe(document,{childList:!0,subtree:!0});function r(t){const s={};return t.integrity&&(s.integrity=t.integrity),t.referrerpolicy&&(s.referrerPolicy=t.referrerpolicy),t.crossorigin==="use-credentials"?s.credentials="include":t.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function o(t){if(t.ep)return;t.ep=!0;const s=r(t);fetch(t.href,s)}})();class c{constructor(e){n(this,"id");n(this,"hasWumpus");n(this,"hasHole");n(this,"hasBat");this.id=e,this.hasWumpus=!1,this.hasHole=!1,this.hasBat=!1}}function f(a,e){if(a*e<20)throw new Error("The gameboard is too small! Choose a bigger one.");const r=[];for(let o=0;o<a;o++){const t=[];for(let s=0;s<e;s++){const i=new c(s*a+o+1);Math.random()<.2?i.hasHole=!0:Math.random()<.3&&(i.hasBat=!0),t.push(i)}r.push(t)}for(;;){const o=Math.round(Math.random()*(a-1)),t=Math.round(Math.random()*(e-1)),s=r[o][t];if(!s.hasHole&&!s.hasBat){s.hasWumpus=!0;break}}return r}class m{constructor(){n(this,"arrowCount");n(this,"moveCount");n(this,"board");n(this,"playerX",0);n(this,"playerY",0);this.arrowCount=5,this.moveCount=0,this.board=f(5,4),this.randomizePlayerPosition()}randomizePlayerPosition(){for(;;){this.playerX=Math.round(Math.random()*(this.board.length-1)),this.playerY=Math.round(Math.random()*(this.board[0].length-1));const e=this.board[this.playerX][this.playerY];if(!e.hasWumpus&&!e.hasHole&&!e.hasBat)return}}movePlayer(e){let r=this.playerX,o=this.playerY;if(e==="North")o-=1,this.moveCount+=1;else if(e==="East")r+=1,this.moveCount+=1;else if(e==="South")o+=1,this.moveCount+=1;else if(e==="West")r-=1,this.moveCount+=1;else{console.log("Choose either North, East, South or West.");return}r===this.board.length?r=0:r===-1&&(r=this.board.length-1),o===this.board[0].length?o=0:o===-1&&(o=this.board[0].length-1),this.playerX=r,this.playerY=o}wumpusPosition(){for(let e=0;e<this.board[0].length;e++)for(let r=0;r<this.board.length;r++)this.board[r][e].hasWumpus}moveWumpus(){for(let e=0;e<this.board[0].length;e++)for(let r=0;r<this.board.length;r++)if(this.board[r][e].hasWumpus){let o=r+1,t=e;o===this.board.length?o=0:t===this.board[0].length&&(t=0),console.log(r),console.log(e),this.board[r][e].hasWumpus=!1,this.board[o][t].hasWumpus=!0;return}}}class b{constructor(e,r,o){n(this,"boardContainer");n(this,"arrowContainer");n(this,"moveContainer");this.boardContainer=document.querySelector(e),this.arrowContainer=document.querySelector(r),this.moveContainer=document.querySelector(o)}renderBoard(e){let r="";for(let o=0;o<e.board[0].length;o++){r+="<tr>";for(let t=0;t<e.board.length;t++)e.playerX===t&&e.playerY===o?r+=`<td class="board-square"> ${e.board[t][o].id} <img src="/player.jpg" width="50"></td>`:e.board[t][o].hasWumpus?r+=`<td class="board-square"> ${e.board[t][o].id} <img src="/wumpus.png" width="50"></td>`:e.board[t][o].hasHole?r+=`<td class="board-square"> ${e.board[t][o].id} <img src="/hole.jpg" width="50"></td>`:e.board[t][o].hasBat?r+=`<td class="board-square"> ${e.board[t][o].id} <img src="/bats.jpg" width="50"></td>`:r+=`<td class="board-square"> ${e.board[t][o].id} </td>`;r+="</tr>"}this.boardContainer.innerHTML=r}renderArrows(e){this.arrowContainer.innerHTML=e.arrowCount.toString()}renderMoves(e){this.moveContainer.innerHTML=e.moveCount.toString()}renderAll(e){this.renderBoard(e),this.renderArrows(e),this.renderMoves(e)}}const h=new b("#boardContainer","#arrows","#moves"),l=new m;h.renderAll(l);setTimeout(()=>h.renderAll(l),3e3);console.log(l.board);
