var p=Object.defineProperty;var d=(a,t,o)=>t in a?p(a,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):a[t]=o;var u=(a,t,o)=>(d(a,typeof t!="symbol"?t+"":t,o),o);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))i(e);new MutationObserver(e=>{for(const s of e)if(s.type==="childList")for(const r of s.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&i(r)}).observe(document,{childList:!0,subtree:!0});function o(e){const s={};return e.integrity&&(s.integrity=e.integrity),e.referrerpolicy&&(s.referrerPolicy=e.referrerpolicy),e.crossorigin==="use-credentials"?s.credentials="include":e.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function i(e){if(e.ep)return;e.ep=!0;const s=o(e);fetch(e.href,s)}})();class c{constructor(t){u(this,"id");u(this,"hasWumpus");u(this,"hasHole");u(this,"hasBat");this.id=t,this.hasWumpus=!1,this.hasHole=!1,this.hasBat=!1}}class l{constructor(t,o,i,e=null){u(this,"arrowCount");u(this,"arrowMoveCount",0);u(this,"moveCount");u(this,"board",[]);u(this,"playerX",0);u(this,"playerY",0);u(this,"arrowX",-1);u(this,"arrowY",-1);u(this,"state","Choose");u(this,"inputOutput");u(this,"renderer");this.arrowCount=5,this.moveCount=0,this.generateGameboard(t,o),this.randomizePlayerPosition(),this.inputOutput=i,this.inputOutput.input.addEventListener("keyup",s=>{s.key==="Enter"&&(s.preventDefault(),this.gameLoop())}),this.inputOutput.writeLine("Lets find Wumpus before he finds you!"),this.initRoom(),this.renderer=e,this.renderAll()}renderAll(){this.renderer!=null&&this.renderer.renderAll(this.board,this.playerX,this.playerY,this.arrowX,this.arrowY,this.arrowCount,this.moveCount)}randomizePlayerPosition(){for(;;){this.playerX=Math.round(Math.random()*(this.board.length-1)),this.playerY=Math.round(Math.random()*(this.board[0].length-1));const t=this.board[this.playerX][this.playerY];if(!t.hasWumpus&&!t.hasHole&&!t.hasBat)return}}move(t,o){let i,e;if(t==="player"||this.arrowX===-1)i=this.playerX,e=this.playerY;else if(t==="arrow")i=this.arrowX,e=this.arrowY;else return;const s=/^north|n$/i,r=/^east|e$/i,n=/^south|s$/i,h=/^west|w$/i;if(s.test(o))e--,this.moveCount++;else if(r.test(o))i++,this.moveCount++;else if(n.test(o))e++,this.moveCount++;else if(h.test(o))i--,this.moveCount++;else{this.inputOutput.writeLine("Choose either North, East, South or West.");return}i===this.board.length&&(i=0),i===-1&&(i=this.board.length-1),e===this.board[0].length&&(e=0),e===-1&&(e=this.board[0].length-1),t==="player"?(this.playerX=i,this.playerY=e):t==="arrow"&&(this.arrowX=i,this.arrowY=e),this.triggerEvents(),this.renderAll()}triggerEvents(){const t=this.board[this.playerX][this.playerY];t.hasWumpus&&this.inputOutput.writeLine("Wumpus killed you.. Game over."),t.hasHole&&this.inputOutput.writeLine("You fell into a hole.. Game over."),t.hasBat&&(this.randomizePlayerPosition(),this.inputOutput.writeLine("You walked right into the bats! They flew away with you.")),this.playerX===this.arrowX&&this.playerY===this.arrowY&&this.inputOutput.writeLine("You (hopefully) accidentally shot yourself.. Game over."),this.arrowX!==-1&&this.arrowY!==-1&&this.board[this.arrowX][this.arrowY].hasWumpus&&this.winGame()}adjacentRooms(){let t=this.playerY-1,o=this.playerX+1,i=this.playerY+1,e=this.playerX-1;o===this.board.length&&(o=0),e===-1&&(e=this.board.length-1),i===this.board[0].length&&(i=0),t===-1&&(t=this.board[0].length-1);const s=this.board[this.playerX][t],r=this.board[o][this.playerY],n=this.board[this.playerX][i],h=this.board[e][this.playerY];return[s,r,n,h]}initRoom(){let t=!1,o=!1;const i=[];for(const e of this.adjacentRooms())i.push(` ${e.id}`),e.hasWumpus&&(t=!0),e.hasHole&&(o=!0);t&&this.inputOutput.writeLine("You smell of Wumpus!"),o&&this.inputOutput.writeLine("You sense the smell of sewage.."),this.inputOutput.writeLine(`You can go to rooms${i.toString()}.`),this.inputOutput.writeLine("Would you like to move or shoot? (M, S)")}wumpusPosition(){for(let t=0;t<this.board[0].length;t++)for(let o=0;o<this.board.length;o++)this.board[o][t].hasWumpus}moveWumpus(){for(let t=0;t<this.board[0].length;t++)for(let o=0;o<this.board.length;o++)if(this.board[o][t].hasWumpus){let i=o+1,e=t;i===this.board.length?i=0:e===this.board[0].length&&(e=0),console.log(o),console.log(t),this.board[o][t].hasWumpus=!1,this.board[i][e].hasWumpus=!0;return}}generateGameboard(t,o){if(t*o<20)throw new Error("The gameboard is too small! Choose a bigger one.");const i=[];for(let e=0;e<t;e++){const s=[];for(let r=0;r<o;r++){const n=new c(r*t+e+1);Math.random()<.2?n.hasHole=!0:Math.random()<.3&&(n.hasBat=!0),s.push(n)}i.push(s)}if(l.emptyRooms(i)<2){this.generateGameboard(t,o);return}l.randomizeWumpusPosition(i),this.board=i}gameLoop(){if(this.renderAll(),this.state==="Choose"){const t=this.inputOutput.inputLine();t==="M"?(this.state="Move",this.inputOutput.writeLine("In which direction would you like to go? (N, E, S, W)")):t==="S"?(this.state="Shoot",this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")):this.inputOutput.writeLine("Would you like to move or shoot? (M, S)")}else if(this.state==="Move"){const t=this.inputOutput.inputLine();t==="N"||t==="E"||t==="S"||t==="W"?(this.move("player",t),this.initRoom()):this.inputOutput.writeLine("In which direction would you like to go? (N, E, S, W)")}else if(this.state==="Shoot"){const t=this.inputOutput.inputLine();t==="N"||t==="E"||t==="S"||t==="W"?(this.move("arrow",t),this.arrowMoveCount++,this.arrowMoveCount===3&&this.inputOutput.input.disabled===!1&&(this.state="Choose",this.arrowX=-1,this.arrowY=-1,this.inputOutput.writeLine("Would you like to move or shoot? (M, S)"))):this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")}}winGame(){this.state="Won",this.inputOutput.writeLine("You have won!"),this.inputOutput.writeLine(`You defeated Wumpus after only ${this.moveCount} moves!`),this.inputOutput.disableInput()}static randomizeWumpusPosition(t){for(;;){const o=Math.round(Math.random()*(t.length-1)),i=Math.round(Math.random()*(t[0].length-1)),e=t[o][i];if(!e.hasHole&&!e.hasBat){e.hasWumpus=!0;break}}}static emptyRooms(t){let o=0;for(let i=0;i<t[0].length;i++)for(let e=0;e<t.length;e++){const s=t[e][i];!s.hasHole&&!s.hasBat&&o++}return o}}class f{constructor(t,o,i){u(this,"boardContainer");u(this,"arrowContainer");u(this,"moveContainer");this.boardContainer=document.querySelector(t),this.arrowContainer=document.querySelector(o),this.moveContainer=document.querySelector(i)}renderBoard(t,o,i,e,s){let r="";for(let n=0;n<t[0].length;n++){r+="<tr>";for(let h=0;h<t.length;h++)o===h&&i===n?r+=`<td class="board-square"> ${t[h][n].id} <img src="player.jpg" width="50"></td>`:e===h&&s===n?r+=`<td class="board-square"> ${t[h][n].id} <img src="/arrow.jpg" width="50"></td>`:t[h][n].hasWumpus?r+=`<td class="board-square"> ${t[h][n].id} <img src="/wumpus.png" width="50"></td>`:t[h][n].hasHole?r+=`<td class="board-square"> ${t[h][n].id} <img src="/hole.jpg" width="50"></td>`:t[h][n].hasBat?r+=`<td class="board-square"> ${t[h][n].id} <img src="/bats.jpg" width="50"></td>`:r+=`<td class="board-square"> ${t[h][n].id} </td>`;r+="</tr>"}this.boardContainer.innerHTML=r}renderArrows(t){this.arrowContainer.innerHTML=t.toString()}renderMoves(t){this.moveContainer.innerHTML=t.toString()}renderAll(t,o,i,e,s,r,n){this.renderBoard(t,o,i,e,s),this.renderArrows(r),this.renderMoves(n)}}class m{constructor(t,o){u(this,"input");u(this,"output");this.input=document.querySelector(t),this.output=document.querySelector(o)}writeLine(t){this.output.innerHTML+=`${t}
`}inputLine(){const t=this.input.value;return this.writeLine(`> ${t}`),this.input.value="",t}disableInput(){this.input.disabled=!0}}const w=new m("#input","#output"),y=new f("#boardContainer","#arrows","#moves"),g=new l(5,4,w,y);console.log(g);
