var c=Object.defineProperty;var m=(a,e,o)=>e in a?c(a,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):a[e]=o;var i=(a,e,o)=>(m(a,typeof e!="symbol"?e+"":e,o),o);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))s(t);new MutationObserver(t=>{for(const r of t)if(r.type==="childList")for(const n of r.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&s(n)}).observe(document,{childList:!0,subtree:!0});function o(t){const r={};return t.integrity&&(r.integrity=t.integrity),t.referrerpolicy&&(r.referrerPolicy=t.referrerpolicy),t.crossorigin==="use-credentials"?r.credentials="include":t.crossorigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(t){if(t.ep)return;t.ep=!0;const r=o(t);fetch(t.href,r)}})();class f{constructor(e){i(this,"id");i(this,"hasWumpus");i(this,"hasHole");i(this,"hasBat");this.id=e,this.hasWumpus=!1,this.hasHole=!1,this.hasBat=!1}}class h{constructor(e,o,s=null){i(this,"arrowCount");i(this,"moveCount");i(this,"board",[]);i(this,"playerX",0);i(this,"playerY",0);i(this,"renderer");this.arrowCount=5,this.moveCount=0,this.generateGameboard(e,o),this.randomizePlayerPosition(),this.renderer=s,this.renderer!=null&&this.renderer.renderAll(this.board,this.playerX,this.playerY,this.arrowCount,this.moveCount)}randomizePlayerPosition(){for(;;){this.playerX=Math.round(Math.random()*(this.board.length-1)),this.playerY=Math.round(Math.random()*(this.board[0].length-1));const e=this.board[this.playerX][this.playerY];if(!e.hasWumpus&&!e.hasHole&&!e.hasBat)return}}movePlayer(e){let o=this.playerX,s=this.playerY;const t=/^north|n$/i,r=/^east|e$/i,n=/^south|s$/i,l=/^west|w$/i;if(t.test(e))s--,this.moveCount++;else if(r.test(e))o++,this.moveCount++;else if(n.test(e))s++,this.moveCount++;else if(l.test(e))o--,this.moveCount++;else{console.log("Choose either North, East, South or West.");return}o===this.board.length&&(o=0),o===-1&&(o=this.board.length-1),s===this.board[0].length&&(s=0),s===-1&&(s=this.board[0].length-1),this.playerX=o,this.playerY=s,this.triggerEvents(),this.adjacentSmells(),this.renderer!=null&&this.renderer.renderAll(this.board,this.playerX,this.playerY,this.arrowCount,this.moveCount)}triggerEvents(){const e=this.board[this.playerX][this.playerY];e.hasWumpus&&console.log("Game over"),e.hasHole&&console.log("Game over"),e.hasBat&&(this.randomizePlayerPosition(),console.log("landat p\xE5 bat"))}adjacentRooms(){let e=this.playerY-1,o=this.playerX+1,s=this.playerY+1,t=this.playerX-1;o===this.board.length&&(o=0),t===-1&&(t=this.board.length-1),s===this.board[0].length&&(s=0),e===-1&&(e=this.board[0].length-1);const r=this.board[this.playerX][e],n=this.board[o][this.playerY],l=this.board[this.playerX][s],d=this.board[t][this.playerY];return[r,n,l,d]}adjacentSmells(){for(const e of this.adjacentRooms())e.hasWumpus&&console.log("you smell of wumpus"),e.hasHole&&console.log("you sense the smell of sewage..")}wumpusPosition(){for(let e=0;e<this.board[0].length;e++)for(let o=0;o<this.board.length;o++)this.board[o][e].hasWumpus}moveWumpus(){for(let e=0;e<this.board[0].length;e++)for(let o=0;o<this.board.length;o++)if(this.board[o][e].hasWumpus){let s=o+1,t=e;s===this.board.length?s=0:t===this.board[0].length&&(t=0),console.log(o),console.log(e),this.board[o][e].hasWumpus=!1,this.board[s][t].hasWumpus=!0;return}}generateGameboard(e,o){if(e*o<20)throw new Error("The gameboard is too small! Choose a bigger one.");const s=[];for(let t=0;t<e;t++){const r=[];for(let n=0;n<o;n++){const l=new f(n*e+t+1);Math.random()<.2?l.hasHole=!0:Math.random()<.3&&(l.hasBat=!0),r.push(l)}s.push(r)}if(h.emptyRooms(s)<2){console.log("bad room, trying again!"),this.generateGameboard(e,o);return}h.randomizeWumpusPosition(s),this.board=s}static randomizeWumpusPosition(e){for(;;){const o=Math.round(Math.random()*(e.length-1)),s=Math.round(Math.random()*(e[0].length-1)),t=e[o][s];if(!t.hasHole&&!t.hasBat){t.hasWumpus=!0;break}}}static emptyRooms(e){let o=0;for(let s=0;s<e[0].length;s++)for(let t=0;t<e.length;t++){const r=e[t][s];!r.hasHole&&!r.hasBat&&o++}return o}}class p{constructor(e,o,s){i(this,"boardContainer");i(this,"arrowContainer");i(this,"moveContainer");this.boardContainer=document.querySelector(e),this.arrowContainer=document.querySelector(o),this.moveContainer=document.querySelector(s)}renderBoard(e,o,s){let t="";for(let r=0;r<e[0].length;r++){t+="<tr>";for(let n=0;n<e.length;n++)o===n&&s===r?t+=`<td class="board-square"> ${e[n][r].id} <img src="/player.jpg" width="50"></td>`:e[n][r].hasWumpus?t+=`<td class="board-square"> ${e[n][r].id} <img src="/wumpus.png" width="50"></td>`:e[n][r].hasHole?t+=`<td class="board-square"> ${e[n][r].id} <img src="/hole.jpg" width="50"></td>`:e[n][r].hasBat?t+=`<td class="board-square"> ${e[n][r].id} <img src="/bats.jpg" width="50"></td>`:t+=`<td class="board-square"> ${e[n][r].id} </td>`;t+="</tr>"}this.boardContainer.innerHTML=t}renderArrows(e){this.arrowContainer.innerHTML=e.toString()}renderMoves(e){this.moveContainer.innerHTML=e.toString()}renderAll(e,o,s,t,r){this.renderBoard(e,o,s),this.renderArrows(t),this.renderMoves(r)}}const g=new p("#boardContainer","#arrows","#moves"),u=new h(5,4,g);setTimeout(()=>u.movePlayer("n"),1e3);console.log(u.adjacentSmells());console.log(u);
