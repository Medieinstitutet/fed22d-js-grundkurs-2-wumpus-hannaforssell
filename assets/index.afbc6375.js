var m=Object.defineProperty;var c=(s,t,o)=>t in s?m(s,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):s[t]=o;var r=(s,t,o)=>(c(s,typeof t!="symbol"?t+"":t,o),o);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))i(e);new MutationObserver(e=>{for(const h of e)if(h.type==="childList")for(const l of h.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&i(l)}).observe(document,{childList:!0,subtree:!0});function o(e){const h={};return e.integrity&&(h.integrity=e.integrity),e.referrerpolicy&&(h.referrerPolicy=e.referrerpolicy),e.crossorigin==="use-credentials"?h.credentials="include":e.crossorigin==="anonymous"?h.credentials="omit":h.credentials="same-origin",h}function i(e){if(e.ep)return;e.ep=!0;const h=o(e);fetch(e.href,h)}})();class y{constructor(t){r(this,"id");r(this,"hasWumpus");r(this,"hasHole");r(this,"hasBat");this.id=t,this.hasWumpus=!1,this.hasHole=!1,this.hasBat=!1}}var p=(s=>(s[s.Move=0]="Move",s[s.Shoot=1]="Shoot",s[s.Unknown=2]="Unknown",s))(p||{}),n=(s=>(s[s.North=0]="North",s[s.East=1]="East",s[s.South=2]="South",s[s.West=3]="West",s[s.Unknown=4]="Unknown",s))(n||{});class a{constructor(t,o){r(this,"input");r(this,"output");this.input=document.querySelector(t),this.output=document.querySelector(o)}writeLine(t){this.output.innerHTML+=`${t}
`,this.output.scrollTop=this.output.scrollHeight}inputLine(){const t=this.input.value;return this.writeLine(`> ${t}`),this.input.value="",t}disableInput(){this.input.disabled=!0}static parseDirection(t){return this.regexNorth.test(t)?n.North:this.regexEast.test(t)?n.East:this.regexSouth.test(t)?n.South:this.regexWest.test(t)?n.West:n.Unknown}static parseAction(t){return this.regexMove.test(t)?p.Move:this.regexShoot.test(t)?p.Shoot:p.Unknown}}r(a,"regexNorth",/^north|n$/i),r(a,"regexEast",/^east|e$/i),r(a,"regexSouth",/^south|s$/i),r(a,"regexWest",/^west|w$/i),r(a,"regexMove",/^move|m$/i),r(a,"regexShoot",/^shoot|s$/i);var u=(s=>(s[s.Choose=0]="Choose",s[s.Move=1]="Move",s[s.Shoot=2]="Shoot",s[s.Won=3]="Won",s[s.Lost=4]="Lost",s))(u||{});class w{constructor(t,o,i,e=null){r(this,"width");r(this,"height");r(this,"arrowCount",5);r(this,"arrowMoveCount",0);r(this,"moveCount",0);r(this,"board",[]);r(this,"playerX",0);r(this,"playerY",0);r(this,"arrowX",-1);r(this,"arrowY",-1);r(this,"state",u.Choose);r(this,"gameOver",!1);r(this,"inputOutput");r(this,"renderer");this.width=t,this.height=o,this.inputOutput=i,this.renderer=e}start(){this.generateGameboard(this.width,this.height),this.randomizePlayerPosition(),this.inputOutput.input.addEventListener("keyup",t=>{t.key==="Enter"&&(t.preventDefault(),this.gameLoop())}),this.inputOutput.writeLine("Lets shoot Wumpus before he finds you!"),this.initRoom(),this.renderAll()}renderAll(){this.renderer!=null&&this.renderer.renderAll(this.board,this.playerX,this.playerY,this.arrowX,this.arrowY,this.arrowCount,this.moveCount)}randomizePlayerPosition(){for(;;){this.playerX=Math.round(Math.random()*(this.board.length-1)),this.playerY=Math.round(Math.random()*(this.board[0].length-1));const t=this.board[this.playerX][this.playerY];if(!t.hasWumpus&&!t.hasHole&&!t.hasBat)return}}move(t,o){let i,e;if(t==="player"||this.arrowX===-1)i=this.playerX,e=this.playerY;else if(t==="arrow")i=this.arrowX,e=this.arrowY;else return;if(o===n.North)e--,t==="player"&&this.moveCount++;else if(o===n.East)i++,t==="player"&&this.moveCount++;else if(o===n.South)e++,t==="player"&&this.moveCount++;else if(o===n.West)i--,t==="player"&&this.moveCount++;else{this.inputOutput.writeLine("Choose either North, East, South or West.");return}i===this.board.length&&(i=0),i===-1&&(i=this.board.length-1),e===this.board[0].length&&(e=0),e===-1&&(e=this.board[0].length-1),t==="player"?(this.playerX=i,this.playerY=e):t==="arrow"&&(this.arrowX=i,this.arrowY=e),this.triggerEvents(),this.renderAll()}triggerEvents(){let t=this.board[this.playerX][this.playerY];t.hasWumpus&&(this.inputOutput.writeLine("Wumpus killed you.."),this.loseGame()),t.hasHole&&(this.inputOutput.writeLine("You fell into a hole.."),this.loseGame()),t.hasBat&&(this.randomizePlayerPosition(),t=this.board[this.playerX][this.playerY],this.inputOutput.writeLine(`You walked right into the bats! They flew away with you to room ${t.id}.`)),this.arrowCount<=0&&(this.inputOutput.writeLine("You ran out of arrows.."),this.loseGame()),this.playerX===this.arrowX&&this.playerY===this.arrowY&&(this.inputOutput.writeLine("You (hopefully) accidentally shot yourself.."),this.loseGame()),this.arrowX!==-1&&this.arrowY!==-1&&this.board[this.arrowX][this.arrowY].hasWumpus&&this.winGame()}adjacentRooms(){let t=this.playerY-1,o=this.playerX+1,i=this.playerY+1,e=this.playerX-1;o===this.board.length&&(o=0),e===-1&&(e=this.board.length-1),i===this.board[0].length&&(i=0),t===-1&&(t=this.board[0].length-1);const h=this.board[this.playerX][t],l=this.board[o][this.playerY],f=this.board[this.playerX][i],d=this.board[e][this.playerY];return[h,l,f,d]}initRoom(){let t=!1,o=!1,i=!1;const e=[];for(const h of this.adjacentRooms())e.push(` ${h.id}`),h.hasWumpus&&(t=!0),h.hasHole&&(o=!0),h.hasBat&&(i=!0);t&&this.inputOutput.writeLine("You smell of Wumpus!"),o&&this.inputOutput.writeLine("You sense the smell of sewage.."),i&&this.inputOutput.writeLine("You feel the wind coming from wingtips.."),this.inputOutput.writeLine(`You can go to rooms${e.toString()}.`),this.inputOutput.writeLine(`Would you like to move or shoot? (M, S) [${this.arrowCount} arrows left]`)}generateGameboard(t,o){if(t*o<20)throw new Error("The gameboard is too small! Choose a bigger one.");const i=[];for(let e=0;e<t;e++){const h=[];for(let l=0;l<o;l++){const f=new y(l*t+e+1);Math.random()<.2?f.hasHole=!0:Math.random()<.3&&(f.hasBat=!0),h.push(f)}i.push(h)}if(w.emptyRooms(i)<2){this.generateGameboard(t,o);return}w.randomizeWumpusPosition(i),this.board=i}gameLoop(){this.renderAll();const t=this.inputOutput.inputLine();if(this.state===u.Choose){const o=a.parseAction(t);o===p.Move?(this.state=u.Move,this.inputOutput.writeLine("In which direction would you like to go? (N, E, S, W)")):o===p.Shoot?(this.state=u.Shoot,this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")):this.inputOutput.writeLine(`Would you like to move or shoot? (M, S) [${this.arrowCount} arrows left]`)}else if(this.state===u.Move){const o=a.parseDirection(t);if(o!==n.Unknown){if(this.move("player",o),this.gameOver)return;this.initRoom(),this.state=u.Choose}else this.inputOutput.writeLine("In which direction would you like to go? (N, E, S, W)")}else if(this.state===u.Shoot){const o=a.parseDirection(t);if(o!==n.Unknown){if(this.move("arrow",o),this.gameOver)return;if(this.arrowMoveCount++,this.arrowMoveCount===3){if(this.state=u.Choose,this.arrowX=-1,this.arrowY=-1,this.arrowMoveCount=0,this.arrowCount--,this.triggerEvents(),this.renderAll(),this.gameOver)return;this.inputOutput.writeLine(`Would you like to move or shoot? (M, S) [${this.arrowCount} arrows left]`)}else this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")}else this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")}}winGame(){this.state=u.Won,this.gameOver=!0,this.inputOutput.writeLine("You have won!"),this.inputOutput.writeLine(`You defeated Wumpus after${this.moveCount<=5?" only":""} ${this.moveCount} moves!`),this.inputOutput.disableInput()}loseGame(){this.state=u.Lost,this.gameOver=!0,this.inputOutput.writeLine("You have lost the game.."),this.inputOutput.disableInput()}static randomizeWumpusPosition(t){for(;;){const o=Math.round(Math.random()*(t.length-1)),i=Math.round(Math.random()*(t[0].length-1)),e=t[o][i];if(!e.hasHole&&!e.hasBat){e.hasWumpus=!0;break}}}static emptyRooms(t){let o=0;for(let i=0;i<t[0].length;i++)for(let e=0;e<t.length;e++){const h=t[e][i];!h.hasHole&&!h.hasBat&&o++}return o}}const g=new a("#input","#output"),v=new w(5,4,g);v.start();
