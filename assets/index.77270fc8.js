var d=Object.defineProperty;var p=(u,t,r)=>t in u?d(u,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):u[t]=r;var a=(u,t,r)=>(p(u,typeof t!="symbol"?t+"":t,r),r);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))s(e);new MutationObserver(e=>{for(const o of e)if(o.type==="childList")for(const i of o.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&s(i)}).observe(document,{childList:!0,subtree:!0});function r(e){const o={};return e.integrity&&(o.integrity=e.integrity),e.referrerpolicy&&(o.referrerPolicy=e.referrerpolicy),e.crossorigin==="use-credentials"?o.credentials="include":e.crossorigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function s(e){if(e.ep)return;e.ep=!0;const o=r(e);fetch(e.href,o)}})();class m{constructor(t){a(this,"id");a(this,"hasWumpus");a(this,"hasHole");a(this,"hasBat");this.id=t,this.hasWumpus=!1,this.hasHole=!1,this.hasBat=!1}}class l{constructor(t,r,s,e=null){a(this,"arrowCount");a(this,"moveCount");a(this,"board",[]);a(this,"playerX",0);a(this,"playerY",0);a(this,"arrowX",-1);a(this,"arrowY",-1);a(this,"inputOutput");a(this,"renderer");this.arrowCount=5,this.moveCount=0,this.generateGameboard(t,r),this.randomizePlayerPosition(),this.inputOutput=s,this.inputOutput.input.addEventListener("keyup",o=>{o.key==="Enter"&&(o.preventDefault(),this.gameLoop())}),this.inputOutput.writeLine("Lets hunt some WumpASS!"),this.initRoom(),this.renderer=e,this.renderer!=null&&this.renderer.renderAll(this.board,this.playerX,this.playerY,this.arrowX,this.arrowY,this.arrowCount,this.moveCount)}randomizePlayerPosition(){for(;;){this.playerX=Math.round(Math.random()*(this.board.length-1)),this.playerY=Math.round(Math.random()*(this.board[0].length-1));const t=this.board[this.playerX][this.playerY];if(!t.hasWumpus&&!t.hasHole&&!t.hasBat)return}}move(t,r){let s,e;if(t==="player"||this.arrowX===-1)s=this.playerX,e=this.playerY;else if(t==="arrow")s=this.arrowX,e=this.arrowY;else return;const o=/^north|n$/i,i=/^east|e$/i,n=/^south|s$/i,h=/^west|w$/i;if(o.test(r))e--,this.moveCount++;else if(i.test(r))s++,this.moveCount++;else if(n.test(r))e++,this.moveCount++;else if(h.test(r))s--,this.moveCount++;else{this.inputOutput.writeLine("Choose either North, East, South or West.");return}s===this.board.length&&(s=0),s===-1&&(s=this.board.length-1),e===this.board[0].length&&(e=0),e===-1&&(e=this.board[0].length-1),t==="player"?(this.playerX=s,this.playerY=e):t==="arrow"&&(this.arrowX=s,this.arrowY=e),this.triggerEvents(),this.renderer!=null&&this.renderer.renderAll(this.board,this.playerX,this.playerY,this.arrowX,this.arrowY,this.arrowCount,this.moveCount)}triggerEvents(){const t=this.board[this.playerX][this.playerY],r=this.board[this.arrowX][this.arrowY];t.hasWumpus&&this.inputOutput.writeLine("Game over"),t.hasHole&&this.inputOutput.writeLine("Game over"),t.hasBat&&(this.randomizePlayerPosition(),this.inputOutput.writeLine("landed on bat")),t===r&&this.inputOutput.writeLine("you have shot yourself")}adjacentRooms(){let t=this.playerY-1,r=this.playerX+1,s=this.playerY+1,e=this.playerX-1;r===this.board.length&&(r=0),e===-1&&(e=this.board.length-1),s===this.board[0].length&&(s=0),t===-1&&(t=this.board[0].length-1);const o=this.board[this.playerX][t],i=this.board[r][this.playerY],n=this.board[this.playerX][s],h=this.board[e][this.playerY];return[o,i,n,h]}initRoom(){let t=!1,r=!1;const s=[];for(const e of this.adjacentRooms())s.push(e.id),e.hasWumpus&&(t=!0),e.hasHole&&(r=!0);t&&this.inputOutput.writeLine("You smell of Wumpus"),r&&this.inputOutput.writeLine("You sense the smell of sewage.."),this.inputOutput.writeLine(`You can go to rooms ${s.toString()}`),this.inputOutput.writeLine("Would you like to move or shoot?")}wumpusPosition(){for(let t=0;t<this.board[0].length;t++)for(let r=0;r<this.board.length;r++)this.board[r][t].hasWumpus}moveWumpus(){for(let t=0;t<this.board[0].length;t++)for(let r=0;r<this.board.length;r++)if(this.board[r][t].hasWumpus){let s=r+1,e=t;s===this.board.length?s=0:e===this.board[0].length&&(e=0),console.log(r),console.log(t),this.board[r][t].hasWumpus=!1,this.board[s][e].hasWumpus=!0;return}}generateGameboard(t,r){if(t*r<20)throw new Error("The gameboard is too small! Choose a bigger one.");const s=[];for(let e=0;e<t;e++){const o=[];for(let i=0;i<r;i++){const n=new m(i*t+e+1);Math.random()<.2?n.hasHole=!0:Math.random()<.3&&(n.hasBat=!0),o.push(n)}s.push(o)}if(l.emptyRooms(s)<2){this.generateGameboard(t,r);return}l.randomizeWumpusPosition(s),this.board=s}gameLoop(){console.log("test")}static randomizeWumpusPosition(t){for(;;){const r=Math.round(Math.random()*(t.length-1)),s=Math.round(Math.random()*(t[0].length-1)),e=t[r][s];if(!e.hasHole&&!e.hasBat){e.hasWumpus=!0;break}}}static emptyRooms(t){let r=0;for(let s=0;s<t[0].length;s++)for(let e=0;e<t.length;e++){const o=t[e][s];!o.hasHole&&!o.hasBat&&r++}return r}}class c{constructor(t,r,s){a(this,"boardContainer");a(this,"arrowContainer");a(this,"moveContainer");this.boardContainer=document.querySelector(t),this.arrowContainer=document.querySelector(r),this.moveContainer=document.querySelector(s)}renderBoard(t,r,s,e,o){let i="";for(let n=0;n<t[0].length;n++){i+="<tr>";for(let h=0;h<t.length;h++)r===h&&s===n?i+=`<td class="board-square"> ${t[h][n].id} <img src="/player.jpg" width="50"></td>`:e===h&&o===n?i+=`<td class="board-square"> ${t[h][n].id} <img src="/arrow.jpg" width="50"></td>`:t[h][n].hasWumpus?i+=`<td class="board-square"> ${t[h][n].id} <img src="/wumpus.png" width="50"></td>`:t[h][n].hasHole?i+=`<td class="board-square"> ${t[h][n].id} <img src="/hole.jpg" width="50"></td>`:t[h][n].hasBat?i+=`<td class="board-square"> ${t[h][n].id} <img src="/bats.jpg" width="50"></td>`:i+=`<td class="board-square"> ${t[h][n].id} </td>`;i+="</tr>"}this.boardContainer.innerHTML=i}renderArrows(t){this.arrowContainer.innerHTML=t.toString()}renderMoves(t){this.moveContainer.innerHTML=t.toString()}renderAll(t,r,s,e,o,i,n){this.renderBoard(t,r,s,e,o),this.renderArrows(i),this.renderMoves(n)}}class f{constructor(t,r){a(this,"input");a(this,"output");this.input=document.querySelector(t),this.output=document.querySelector(r)}writeLine(t){this.output.innerHTML+=`${t}
`}}const w=new f("#input","#output"),y=new c("#boardContainer","#arrows","#moves"),g=new l(5,4,w,y);console.log(g);
