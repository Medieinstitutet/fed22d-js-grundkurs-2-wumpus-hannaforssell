var c=Object.defineProperty;var m=(i,t,e)=>t in i?c(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e;var o=(i,t,e)=>(m(i,typeof t!="symbol"?t+"":t,e),e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))s(r);new MutationObserver(r=>{for(const n of r)if(n.type==="childList")for(const h of n.addedNodes)h.tagName==="LINK"&&h.rel==="modulepreload"&&s(h)}).observe(document,{childList:!0,subtree:!0});function e(r){const n={};return r.integrity&&(n.integrity=r.integrity),r.referrerpolicy&&(n.referrerPolicy=r.referrerpolicy),r.crossorigin==="use-credentials"?n.credentials="include":r.crossorigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function s(r){if(r.ep)return;r.ep=!0;const n=e(r);fetch(r.href,n)}})();class g{constructor(t){o(this,"id");o(this,"hasWumpus");o(this,"hasHole");o(this,"hasBat");this.id=t,this.hasWumpus=!1,this.hasHole=!1,this.hasBat=!1}}var f=(i=>(i[i.Move=0]="Move",i[i.Shoot=1]="Shoot",i[i.Unknown=2]="Unknown",i))(f||{}),p=(i=>(i[i.North=0]="North",i[i.East=1]="East",i[i.South=2]="South",i[i.West=3]="West",i[i.Unknown=4]="Unknown",i))(p||{});class l{constructor(t,e){o(this,"input");o(this,"output");this.input=document.querySelector(t),this.output=document.querySelector(e)}writeLine(t){this.output.innerHTML+=`${t}
`,this.output.scrollTop=this.output.scrollHeight}inputLine(){const t=this.input.value;return t===""?"":(this.writeLine(`> ${t}`),this.input.value="",t)}disableInput(){this.input.disabled=!0}static parseDirection(t){return this.regexNorth.test(t)?p.North:this.regexEast.test(t)?p.East:this.regexSouth.test(t)?p.South:this.regexWest.test(t)?p.West:p.Unknown}static parseAction(t){return this.regexMove.test(t)?f.Move:this.regexShoot.test(t)?f.Shoot:f.Unknown}static isRestart(t){const e=this.regexRestart.exec(t);if(e===null)return[!1,0,0];const s=Number(e[1]),r=Number(e[2]);return s===0||r===0?[!0,0,0]:[!0,s,r]}static isCheat(t){return this.regexCheat.test(t)}}o(l,"regexNorth",/^(north|n)$/i),o(l,"regexEast",/^(east|e)$/i),o(l,"regexSouth",/^(south|s)$/i),o(l,"regexWest",/^(west|w)$/i),o(l,"regexMove",/^(move|m)$/i),o(l,"regexShoot",/^(shoot|s)$/i),o(l,"regexRestart",/^restart ?([\d]*) ?([\d]*)$/i),o(l,"regexCheat",/^cheat$/i);var d=(i=>(i[i.Choose=0]="Choose",i[i.Move=1]="Move",i[i.Shoot=2]="Shoot",i[i.Won=3]="Won",i[i.Lost=4]="Lost",i))(d||{});class w{constructor(t,e){o(this,"width",5);o(this,"height",4);o(this,"arrowCount",5);o(this,"arrowMoveCount",0);o(this,"moveCount",0);o(this,"board",[]);o(this,"playerX",0);o(this,"playerY",0);o(this,"arrowX",-1);o(this,"arrowY",-1);o(this,"state",d.Choose);o(this,"gameOver",!1);o(this,"inputOutput");o(this,"useRenderer",!1);o(this,"renderer");this.inputOutput=t,this.renderer=e}start(t,e){this.width=t,this.height=e,this.state=d.Choose,this.inputOutput.output.innerHTML="",this.generateGameboard(this.width,this.height),this.randomizePlayerPosition(),this.gameOver=!1,this.arrowCount=5,this.arrowMoveCount=0,this.moveCount=0,this.arrowX=-1,this.arrowY=-1,this.inputOutput.writeLine("Lets shoot Wumpus before he finds you!"),this.initRoom(),this.renderAll(),this.inputOutput.input.getAttribute("listener")!=="true"&&this.inputOutput.input.addEventListener("keyup",s=>{s.key==="Enter"&&(s.preventDefault(),s.target.setAttribute("listener","true"),this.gameLoop())})}renderAll(){this.useRenderer?this.renderer.renderAll(this.board,this.playerX,this.playerY,this.arrowX,this.arrowY,this.arrowCount,this.moveCount):this.renderer.clear()}randomizePlayerPosition(){for(;;){this.playerX=Math.round(Math.random()*(this.board.length-1)),this.playerY=Math.round(Math.random()*(this.board[0].length-1));const t=this.board[this.playerX][this.playerY];if(!t.hasWumpus&&!t.hasHole&&!t.hasBat)return}}move(t,e){let s,r;if(t==="player"||this.arrowX===-1)s=this.playerX,r=this.playerY;else if(t==="arrow")s=this.arrowX,r=this.arrowY;else return;if(e===p.North)r--,t==="player"&&this.moveCount++;else if(e===p.East)s++,t==="player"&&this.moveCount++;else if(e===p.South)r++,t==="player"&&this.moveCount++;else if(e===p.West)s--,t==="player"&&this.moveCount++;else{this.inputOutput.writeLine("Choose either North, East, South or West.");return}s===this.board.length&&(s=0),s===-1&&(s=this.board.length-1),r===this.board[0].length&&(r=0),r===-1&&(r=this.board[0].length-1),t==="player"?(this.playerX=s,this.playerY=r):t==="arrow"&&(this.arrowX=s,this.arrowY=r),this.triggerEvents(),this.renderAll()}triggerEvents(){let t=this.board[this.playerX][this.playerY];t.hasWumpus&&(this.inputOutput.writeLine("Wumpus killed you.."),this.loseGame()),t.hasHole&&(this.inputOutput.writeLine("You fell into a hole.."),this.loseGame()),t.hasBat&&(this.randomizePlayerPosition(),t=this.board[this.playerX][this.playerY],this.inputOutput.writeLine(`You walked right into the bats! They flew away with you to room ${t.id}.`)),this.arrowCount<=0&&(this.inputOutput.writeLine("You ran out of arrows.."),this.loseGame()),this.playerX===this.arrowX&&this.playerY===this.arrowY&&(this.inputOutput.writeLine("You (hopefully) accidentally shot yourself.."),this.loseGame()),this.arrowX!==-1&&this.arrowY!==-1&&this.board[this.arrowX][this.arrowY].hasWumpus&&this.winGame()}adjacentRooms(){let t=this.playerY-1,e=this.playerX+1,s=this.playerY+1,r=this.playerX-1;e===this.board.length&&(e=0),r===-1&&(r=this.board.length-1),s===this.board[0].length&&(s=0),t===-1&&(t=this.board[0].length-1);const n=this.board[this.playerX][t],h=this.board[e][this.playerY],a=this.board[this.playerX][s],u=this.board[r][this.playerY];return[n,h,a,u]}initRoom(){let t=!1,e=!1,s=!1;const r=[];for(const n of this.adjacentRooms())r.push(` ${n.id}`),n.hasWumpus&&(t=!0),n.hasHole&&(e=!0),n.hasBat&&(s=!0);t&&this.inputOutput.writeLine("You smell of Wumpus!"),e&&this.inputOutput.writeLine("You sense the smell of sewage.."),s&&this.inputOutput.writeLine("You feel the wind coming from wingtips.."),this.inputOutput.writeLine(`You can go to rooms${r.toString()}.`),this.inputOutput.writeLine(`Would you like to move or shoot? (M, S) [${this.arrowCount} arrows left]`)}generateGameboard(t,e){if(t*e<20)throw new Error("The gameboard is too small! Choose a bigger one.");const s=[];for(let r=0;r<t;r++){const n=[];for(let h=0;h<e;h++){const a=new g(h*t+r+1);Math.random()<.2?a.hasHole=!0:Math.random()<.3&&(a.hasBat=!0),n.push(a)}s.push(n)}if(w.emptyRooms(s)<2){this.generateGameboard(t,e);return}w.randomizeWumpusPosition(s),this.board=s}handleRestart(t){const e=l.isRestart(t);return e[0]?(e[1]!==0&&e[2]!==0?e[1]*e[2]<20?this.inputOutput.writeLine("The gameboard is too small! Choose a bigger one."):this.start(e[1],e[2]):this.start(this.width,this.height),!0):!1}handleCheat(t){return l.isCheat(t)?(this.useRenderer=!this.useRenderer,this.inputOutput.writeLine(`Cheats ${this.useRenderer?"activated":"deactivated"}`),this.renderAll(),!0):!1}handleChoose(t){const e=l.parseAction(t);e===f.Move?(this.state=d.Move,this.inputOutput.writeLine("In which direction would you like to go? (N, E, S, W)")):e===f.Shoot?(this.state=d.Shoot,this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")):this.inputOutput.writeLine(`Would you like to move or shoot? (M, S) [${this.arrowCount} arrows left]`)}handleMove(t){const e=l.parseDirection(t);if(e!==p.Unknown){if(this.move("player",e),this.gameOver)return;this.initRoom(),this.state=d.Choose}else this.inputOutput.writeLine("In which direction would you like to go? (N, E, S, W)")}handleShoot(t){const e=l.parseDirection(t);if(e!==p.Unknown){if(this.move("arrow",e),this.gameOver)return;if(this.arrowMoveCount++,this.arrowMoveCount===3){if(this.state=d.Choose,this.arrowX=-1,this.arrowY=-1,this.arrowMoveCount=0,this.arrowCount--,this.triggerEvents(),this.renderAll(),this.gameOver)return;this.inputOutput.writeLine(`Would you like to move or shoot? (M, S) [${this.arrowCount} arrows left]`)}else this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")}else this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")}gameLoop(){this.renderAll();const t=this.inputOutput.inputLine();t!==""&&(this.handleRestart(t)||this.handleCheat(t)||(this.state===d.Choose?this.handleChoose(t):this.state===d.Move?this.handleMove(t):this.state===d.Shoot&&this.handleShoot(t)))}winGame(){this.state=d.Won,this.gameOver=!0,this.inputOutput.writeLine("You have won!"),this.inputOutput.writeLine(`You defeated Wumpus after${this.moveCount<=5?" only":""} ${this.moveCount} moves!`),this.inputOutput.writeLine("Write 'restart' to play again."),this.inputOutput.writeLine("Or write for example 'restart 10 10' to change the board size.")}loseGame(){this.state=d.Lost,this.gameOver=!0,this.inputOutput.writeLine("You have lost the game.."),this.inputOutput.writeLine("Write 'restart' to play again."),this.inputOutput.writeLine("Or write for example 'restart 10 10' to change the board size.")}static randomizeWumpusPosition(t){for(;;){const e=Math.round(Math.random()*(t.length-1)),s=Math.round(Math.random()*(t[0].length-1)),r=t[e][s];if(!r.hasHole&&!r.hasBat){r.hasWumpus=!0;break}}}static emptyRooms(t){let e=0;for(let s=0;s<t[0].length;s++)for(let r=0;r<t.length;r++){const n=t[r][s];!n.hasHole&&!n.hasBat&&e++}return e}}class y{constructor(t,e,s){o(this,"boardContainer");o(this,"arrowContainer");o(this,"moveContainer");this.boardContainer=document.querySelector(t),this.arrowContainer=document.querySelector(e),this.moveContainer=document.querySelector(s)}renderBoard(t,e,s,r,n){let h="";for(let a=0;a<t[0].length;a++){h+="<tr>";for(let u=0;u<t.length;u++)e===u&&s===a?h+=`<td class="board-square"> ${t[u][a].id}
          <img src="player.jpg" alt="a drawn game hand console" width="50"></td>`:r===u&&n===a?h+=`<td class="board-square"> ${t[u][a].id}
          <img src="arrow.jpg" alt="a drawn arrow" width="50"></td>`:t[u][a].hasWumpus?h+=`<td class="board-square"> ${t[u][a].id}
          <img src="wumpus.png" alt="a red drawn monster" width="50"></td>`:t[u][a].hasHole?h+=`<td class="board-square"> ${t[u][a].id}
          <img src="hole.jpg" alt="a hole in the ground" width="50"></td>`:t[u][a].hasBat?h+=`<td class="board-square"> ${t[u][a].id}
          <img src="bats.jpg" alt="multiple cartoon bats" width="50"></td>`:h+=`<td class="board-square"> ${t[u][a].id} </td>`;h+="</tr>"}this.boardContainer.innerHTML=h}renderArrows(t){this.arrowContainer.innerHTML=`Arrows left: ${t.toString()}`}renderMoves(t){this.moveContainer.innerHTML=`Moves: ${t.toString()}`}renderAll(t,e,s,r,n,h,a){this.renderBoard(t,e,s,r,n),this.renderArrows(h),this.renderMoves(a)}clear(){this.boardContainer.innerHTML="",this.arrowContainer.innerHTML="",this.moveContainer.innerHTML=""}}const v=new l("#input","#output"),C=new y("#boardContainer","#arrows","#moves"),L=new w(v,C);L.start(5,4);
