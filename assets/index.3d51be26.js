var d=Object.defineProperty;var m=(a,e,t)=>e in a?d(a,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[e]=t;var i=(a,e,t)=>(m(a,typeof e!="symbol"?e+"":e,t),t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))o(r);new MutationObserver(r=>{for(const s of r)if(s.type==="childList")for(const n of s.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&o(n)}).observe(document,{childList:!0,subtree:!0});function t(r){const s={};return r.integrity&&(s.integrity=r.integrity),r.referrerpolicy&&(s.referrerPolicy=r.referrerpolicy),r.crossorigin==="use-credentials"?s.credentials="include":r.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function o(r){if(r.ep)return;r.ep=!0;const s=t(r);fetch(r.href,s)}})();class c{constructor(e){i(this,"id");i(this,"hasWumpus");i(this,"hasHole");i(this,"hasBat");this.id=e,this.hasWumpus=!1,this.hasHole=!1,this.hasBat=!1}}class l{constructor(e,t,o=null){i(this,"arrowCount");i(this,"moveCount");i(this,"board",[]);i(this,"playerX",0);i(this,"playerY",0);i(this,"renderer");this.arrowCount=5,this.moveCount=0,this.generateGameboard(e,t),this.randomizePlayerPosition(),this.renderer=o,this.renderer!=null&&this.renderer.renderAll(this.board,this.playerX,this.playerY,this.arrowCount,this.moveCount)}randomizePlayerPosition(){for(;;){this.playerX=Math.round(Math.random()*(this.board.length-1)),this.playerY=Math.round(Math.random()*(this.board[0].length-1));const e=this.board[this.playerX][this.playerY];if(!e.hasWumpus&&!e.hasHole&&!e.hasBat)return}}movePlayer(e){let t=this.playerX,o=this.playerY;if(e==="North")o--,this.moveCount++;else if(e==="East")t++,this.moveCount++;else if(e==="South")o++,this.moveCount++;else if(e==="West")t--,this.moveCount++;else{console.log("Choose either North, East, South or West.");return}t===this.board.length?t=0:t===-1&&(t=this.board.length-1),o===this.board[0].length?o=0:o===-1&&(o=this.board[0].length-1),this.playerX=t,this.playerY=o,this.renderer!=null&&this.renderer.renderAll(this.board,this.playerX,this.playerY,this.arrowCount,this.moveCount)}wumpusPosition(){for(let e=0;e<this.board[0].length;e++)for(let t=0;t<this.board.length;t++)this.board[t][e].hasWumpus}moveWumpus(){for(let e=0;e<this.board[0].length;e++)for(let t=0;t<this.board.length;t++)if(this.board[t][e].hasWumpus){let o=t+1,r=e;o===this.board.length?o=0:r===this.board[0].length&&(r=0),console.log(t),console.log(e),this.board[t][e].hasWumpus=!1,this.board[o][r].hasWumpus=!0;return}}generateGameboard(e,t){if(e*t<20)throw new Error("The gameboard is too small! Choose a bigger one.");const o=[];for(let r=0;r<e;r++){const s=[];for(let n=0;n<t;n++){const u=new c(n*e+r+1);Math.random()<.2?u.hasHole=!0:Math.random()<.3&&(u.hasBat=!0),s.push(u)}o.push(s)}if(l.emptyRooms(o)<2){console.log("bad room, trying again!"),this.generateGameboard(e,t);return}l.randomizeWumpusPosition(o),this.board=o}static randomizeWumpusPosition(e){for(;;){const t=Math.round(Math.random()*(e.length-1)),o=Math.round(Math.random()*(e[0].length-1)),r=e[t][o];if(!r.hasHole&&!r.hasBat){r.hasWumpus=!0;break}}}static emptyRooms(e){let t=0;for(let o=0;o<e[0].length;o++)for(let r=0;r<e.length;r++){const s=e[r][o];!s.hasHole&&!s.hasBat&&t++}return t}}class f{constructor(e,t,o){i(this,"boardContainer");i(this,"arrowContainer");i(this,"moveContainer");this.boardContainer=document.querySelector(e),this.arrowContainer=document.querySelector(t),this.moveContainer=document.querySelector(o)}renderBoard(e,t,o){let r="";for(let s=0;s<e[0].length;s++){r+="<tr>";for(let n=0;n<e.length;n++)t===n&&o===s?r+=`<td class="board-square"> ${e[n][s].id} <img src="/player.jpg" width="50"></td>`:e[n][s].hasWumpus?r+=`<td class="board-square"> ${e[n][s].id} <img src="/wumpus.png" width="50"></td>`:e[n][s].hasHole?r+=`<td class="board-square"> ${e[n][s].id} <img src="/hole.jpg" width="50"></td>`:e[n][s].hasBat?r+=`<td class="board-square"> ${e[n][s].id} <img src="/bats.jpg" width="50"></td>`:r+=`<td class="board-square"> ${e[n][s].id} </td>`;r+="</tr>"}this.boardContainer.innerHTML=r}renderArrows(e){this.arrowContainer.innerHTML=e.toString()}renderMoves(e){this.moveContainer.innerHTML=e.toString()}renderAll(e,t,o,r,s){this.renderBoard(e,t,o),this.renderArrows(r),this.renderMoves(s)}}const p=new f("#boardContainer","#arrows","#moves"),h=new l(5,4,p);setTimeout(()=>h.movePlayer("East"),1e3);setTimeout(()=>h.movePlayer("East"),2e3);setTimeout(()=>h.movePlayer("East"),3e3);console.log(h);
