var p=Object.defineProperty;var d=(a,t,s)=>t in a?p(a,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):a[t]=s;var u=(a,t,s)=>(d(a,typeof t!="symbol"?t+"":t,s),s);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))i(e);new MutationObserver(e=>{for(const r of e)if(r.type==="childList")for(const n of r.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&i(n)}).observe(document,{childList:!0,subtree:!0});function s(e){const r={};return e.integrity&&(r.integrity=e.integrity),e.referrerpolicy&&(r.referrerPolicy=e.referrerpolicy),e.crossorigin==="use-credentials"?r.credentials="include":e.crossorigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function i(e){if(e.ep)return;e.ep=!0;const r=s(e);fetch(e.href,r)}})();class f{constructor(t){u(this,"id");u(this,"hasWumpus");u(this,"hasHole");u(this,"hasBat");this.id=t,this.hasWumpus=!1,this.hasHole=!1,this.hasBat=!1}}class l{constructor(t,s,i,e=null){u(this,"arrowCount");u(this,"arrowMoveCount",0);u(this,"moveCount");u(this,"board",[]);u(this,"playerX",0);u(this,"playerY",0);u(this,"arrowX",-1);u(this,"arrowY",-1);u(this,"state","Choose");u(this,"inputOutput");u(this,"renderer");this.arrowCount=5,this.moveCount=0,this.generateGameboard(t,s),this.randomizePlayerPosition(),this.inputOutput=i,this.inputOutput.input.addEventListener("keyup",r=>{r.key==="Enter"&&(r.preventDefault(),this.gameLoop())}),this.inputOutput.writeLine("Lets find Wumpus before he finds you!"),this.initRoom(),this.renderer=e,this.renderAll()}renderAll(){this.renderer!=null&&this.renderer.renderAll(this.board,this.playerX,this.playerY,this.arrowX,this.arrowY,this.arrowCount,this.moveCount)}randomizePlayerPosition(){for(;;){this.playerX=Math.round(Math.random()*(this.board.length-1)),this.playerY=Math.round(Math.random()*(this.board[0].length-1));const t=this.board[this.playerX][this.playerY];if(!t.hasWumpus&&!t.hasHole&&!t.hasBat)return}}move(t,s){let i,e;if(t==="player"||this.arrowX===-1)i=this.playerX,e=this.playerY;else if(t==="arrow")i=this.arrowX,e=this.arrowY;else return;const r=/^north|n$/i,n=/^east|e$/i,o=/^south|s$/i,h=/^west|w$/i;if(r.test(s))e--,t==="player"&&this.moveCount++;else if(n.test(s))i++,t==="player"&&this.moveCount++;else if(o.test(s))e++,t==="player"&&this.moveCount++;else if(h.test(s))i--,t==="player"&&this.moveCount++;else{this.inputOutput.writeLine("Choose either North, East, South or West.");return}i===this.board.length&&(i=0),i===-1&&(i=this.board.length-1),e===this.board[0].length&&(e=0),e===-1&&(e=this.board[0].length-1),t==="player"?(this.playerX=i,this.playerY=e):t==="arrow"&&(this.arrowX=i,this.arrowY=e),this.triggerEvents(),this.renderAll()}triggerEvents(){const t=this.board[this.playerX][this.playerY];t.hasWumpus&&(this.inputOutput.writeLine("Wumpus killed you.."),this.loseGame()),t.hasHole&&(this.inputOutput.writeLine("You fell into a hole.."),this.loseGame()),t.hasBat&&(this.randomizePlayerPosition(),this.inputOutput.writeLine("You walked right into the bats! They flew away with you."),this.loseGame()),this.playerX===this.arrowX&&this.playerY===this.arrowY&&(this.inputOutput.writeLine("You (hopefully) accidentally shot yourself.."),this.loseGame()),this.arrowX!==-1&&this.arrowY!==-1&&this.board[this.arrowX][this.arrowY].hasWumpus&&this.winGame()}adjacentRooms(){let t=this.playerY-1,s=this.playerX+1,i=this.playerY+1,e=this.playerX-1;s===this.board.length&&(s=0),e===-1&&(e=this.board.length-1),i===this.board[0].length&&(i=0),t===-1&&(t=this.board[0].length-1);const r=this.board[this.playerX][t],n=this.board[s][this.playerY],o=this.board[this.playerX][i],h=this.board[e][this.playerY];return[r,n,o,h]}initRoom(){let t=!1,s=!1,i=!1;const e=[];for(const r of this.adjacentRooms())e.push(` ${r.id}`),r.hasWumpus&&(t=!0),r.hasHole&&(s=!0),r.hasBat&&(i=!0);t&&this.inputOutput.writeLine("You smell of Wumpus!"),s&&this.inputOutput.writeLine("You sense the smell of sewage.."),i&&this.inputOutput.writeLine("You feel the wind coming from wingtips.."),this.inputOutput.writeLine(`You can go to rooms${e.toString()}.`),this.inputOutput.writeLine("Would you like to move or shoot? (M, S)")}wumpusPosition(){for(let t=0;t<this.board[0].length;t++)for(let s=0;s<this.board.length;s++)this.board[s][t].hasWumpus}moveWumpus(){for(let t=0;t<this.board[0].length;t++)for(let s=0;s<this.board.length;s++)if(this.board[s][t].hasWumpus){let i=s+1,e=t;i===this.board.length?i=0:e===this.board[0].length&&(e=0),console.log(s),console.log(t),this.board[s][t].hasWumpus=!1,this.board[i][e].hasWumpus=!0;return}}generateGameboard(t,s){if(t*s<20)throw new Error("The gameboard is too small! Choose a bigger one.");const i=[];for(let e=0;e<t;e++){const r=[];for(let n=0;n<s;n++){const o=new f(n*t+e+1);Math.random()<.2?o.hasHole=!0:Math.random()<.3&&(o.hasBat=!0),r.push(o)}i.push(r)}if(l.emptyRooms(i)<2){this.generateGameboard(t,s);return}l.randomizeWumpusPosition(i),this.board=i}gameLoop(){this.renderAll();const t=/^move|m$/i,s=/^shoot|s$/i,i=/^north|n$/i,e=/^east|e$/i,r=/^south|s$/i,n=/^west|w$/i;if(this.state==="Choose"){const o=this.inputOutput.inputLine();t.test(o)?(this.state="Move",this.inputOutput.writeLine("In which direction would you like to go? (N, E, S, W)")):s.test(o)?(this.state="Shoot",this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)"),this.arrowCount--):this.inputOutput.writeLine("Would you like to move or shoot? (M, S)")}else if(this.state==="Move"){const o=this.inputOutput.inputLine();i.test(o)||e.test(o)||r.test(o)||n.test(o)?(this.move("player",o),this.initRoom()):this.inputOutput.writeLine("In which direction would you like to go? (N, E, S, W)")}else if(this.state==="Shoot"){const o=this.inputOutput.inputLine();i.test(o)||e.test(o)||r.test(o)||n.test(o)?(this.move("arrow",o),this.arrowMoveCount++,this.arrowMoveCount===3&&this.inputOutput.input.disabled===!1&&(this.state="Choose",this.arrowX=-1,this.arrowY=-1,this.inputOutput.writeLine("Would you like to move or shoot? (M, S)"))):this.inputOutput.writeLine("In which direction would you like to shoot? (N, E, S, W)")}}winGame(){this.state="Won",this.inputOutput.writeLine("You have won!"),this.inputOutput.writeLine(`You defeated Wumpus after only ${this.moveCount} moves!`),this.inputOutput.disableInput()}loseGame(){this.inputOutput.writeLine("You have lost the game.."),this.inputOutput.disableInput()}static randomizeWumpusPosition(t){for(;;){const s=Math.round(Math.random()*(t.length-1)),i=Math.round(Math.random()*(t[0].length-1)),e=t[s][i];if(!e.hasHole&&!e.hasBat){e.hasWumpus=!0;break}}}static emptyRooms(t){let s=0;for(let i=0;i<t[0].length;i++)for(let e=0;e<t.length;e++){const r=t[e][i];!r.hasHole&&!r.hasBat&&s++}return s}}class c{constructor(t,s,i){u(this,"boardContainer");u(this,"arrowContainer");u(this,"moveContainer");this.boardContainer=document.querySelector(t),this.arrowContainer=document.querySelector(s),this.moveContainer=document.querySelector(i)}renderBoard(t,s,i,e,r){let n="";for(let o=0;o<t[0].length;o++){n+="<tr>";for(let h=0;h<t.length;h++)s===h&&i===o?n+=`<td class="board-square"> ${t[h][o].id} <img src="player.jpg" width="50"></td>`:e===h&&r===o?n+=`<td class="board-square"> ${t[h][o].id} <img src="arrow.jpg" width="50"></td>`:t[h][o].hasWumpus?n+=`<td class="board-square"> ${t[h][o].id} <img src="wumpus.png" width="50"></td>`:t[h][o].hasHole?n+=`<td class="board-square"> ${t[h][o].id} <img src="hole.jpg" width="50"></td>`:t[h][o].hasBat?n+=`<td class="board-square"> ${t[h][o].id} <img src="bats.jpg" width="50"></td>`:n+=`<td class="board-square"> ${t[h][o].id} </td>`;n+="</tr>"}this.boardContainer.innerHTML=n}renderArrows(t){this.arrowContainer.innerHTML=t.toString()}renderMoves(t){this.moveContainer.innerHTML=t.toString()}renderAll(t,s,i,e,r,n,o){this.renderBoard(t,s,i,e,r),this.renderArrows(n),this.renderMoves(o)}}class m{constructor(t,s){u(this,"input");u(this,"output");this.input=document.querySelector(t),this.output=document.querySelector(s)}writeLine(t){this.output.innerHTML+=`${t}
`}inputLine(){const t=this.input.value;return this.writeLine(`> ${t}`),this.input.value="",t}disableInput(){this.input.disabled=!0}}const w=new m("#input","#output"),y=new c("#boardContainer","#arrows","#moves"),g=new l(5,4,w,y);console.log(g);
